{"id":13937,"date":"2017-02-02T18:38:53","date_gmt":"2017-02-02T16:38:53","guid":{"rendered":"https:\/\/stanfy.com\/?p=13937"},"modified":"2019-10-23T13:11:10","modified_gmt":"2019-10-23T10:11:10","slug":"we-improved-node-js-server-response-time-by-100-times","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/","title":{"rendered":"How We Improved Node.js Server Response Time by 100 Times"},"content":{"rendered":"<p>Imagine that you\u2019re building an outstanding mobile application that needs server side support for certain features, like syncing user data or showing posts from other users. Your app is useful and full of animations. However, sometimes it looks laggy while it\u2019s performing server requests; maybe the server is slow, or it often responds with errors. Of course, most users don\u2019t understand the real reason behind lagging \u2013 next time when they see a \u201cnetwork error\u201d message, they remove your app, give you a \u2605\u2606\u2606\u2606\u2606 rating and write negative review.<\/p>\n<p class=\"intro\">Special thanks to @tanzor for his hard work on investigating server performance.<\/p>\n<p>You can solve this kind of problem in two ways: either using <a href=\"https:\/\/stanfy.com\/blog\/do-not-let-your-user-see-spinners\/\">optimistic models<\/a> in your app and avoid showing a \u201cnetwork error\u201d message, or improving your Node.js server performance. The following advice is based on our experience of improving backend servers for some of our mobile apps.<\/p>\n<p>If you are an experienced backend developer, the following tips may be too obvious for you, but you may still find some inspiration!<\/p>\n<h2>Given Infrastructure<\/h2>\n<p>Imagine an Ubuntu server, full of Docker containers: one container is Node.js web-server, another one is NoSQL database, the last one is nginx \u201cto rule them all\u201d. A typical <a href=\"https:\/\/en.wikipedia.org\/wiki\/MEAN_(software_bundle)\">MEAN<\/a>-ish stack.<\/p>\n<p>This server is used for serving app requests, doing some business logic, reading and writing data to a database, sending push notifications, etc. Not HighLoad, not BigData. Jus a modest REST-API server.<\/p>\n<figure id=\"attachment_13946\" aria-describedby=\"caption-attachment-13946\" style=\"width: 740px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"wp-image-13946\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment.jpg\" alt=\"Simplified server environment\" width=\"740\" height=\"173\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment.jpg 1749w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-300x70-1.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-768x179-1.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-1024x239-1.jpg 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-600x140-1.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-450x105-1.jpg 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Simplified-server-environment-1000x233-1.jpg 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><figcaption id=\"caption-attachment-13946\" class=\"wp-caption-text\">Simplified server environment<\/figcaption><\/figure>\n<p>We can always try to improve server performance no matter how simple the server structure and business logic are.<\/p>\n<h2>What to improve<\/h2>\n<p>Of course, you can\u2019t blindly change something, hoping that this will lead to improvement. Measure the change!<\/p>\n<p>We use different monitoring tools to collect server metrics. The most important metric for us is <em>response time<\/em>, which describes how fast the server responds to app requests. Basically, everything affects the response time, from outdated hardware to inefficient code.<\/p>\n<h2>Optimizing database<\/h2>\n<p>We believe that databases are the core of REST-API servers and their performance affects the whole server performance.<\/p>\n<p>The one and only basic database theory sounds like this:<\/p>\n<blockquote><p>We always tend to write data irresponsibly, carelessly, thinking we can just let it hide in the background, but when it comes to reading data, you don&#8217;t just need the data itself, but also performance and operations on data.<\/p><\/blockquote>\n<p>Performance and ease of operations on data is directly proportional to the amount of thinking time spent while recording the data. Understanding this fundamental principle allows you to predict and affect future database performance.<\/p>\n<h3>Upgrading to MongoRocks<\/h3>\n<p>One huge step forward for us was upgrading the storage engine for MongoDB from WiredTiger to RocksDB. We used MongoRocks to connect MongoDB to <a href=\"http:\/\/rocksdb.org\/\">RocksDB<\/a> engine. Parse folks <a href=\"https:\/\/github.com\/ParsePlatform\/parse-server\/wiki\/MongoRocks\">recommend<\/a> using MongoRocks for Parse Server backends, but it may suit your backend too, please follow their guide for more details.<\/p>\n<p>RocksDB has been used with fast storage to support IO-bound, in-memory and write-once workloads. In addition RocksDB is <a href=\"https:\/\/github.com\/facebook\/rocksdb\/\">fully open sourced<\/a> and flexible to allow for innovation. We used Percona Server as our storage provider.<\/p>\n<p><img loading=\"lazy\" class=\"wp-image-13947\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook.png\" alt=\"RocksDB is maintained by Facebook\" width=\"740\" height=\"160\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook.png 1696w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-300x65.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-768x166.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-1024x221.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-600x129.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-450x97.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/RocksDB-is-maintained-by-Facebook-1000x216.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/p>\n<p>The migration was simple:<\/p>\n<ol>\n<li>Install and run Docker container of <a href=\"https:\/\/hub.docker.com\/r\/percona\/percona-server-mongodb\/\">Percona Server<\/a> for RocksDB, link the database to the custom port that differs from current MongoDB\u2019s port.<\/li>\n<li>Create a backup of current database.<\/li>\n<li>Deploy a backup to RocksDB, verify data.<\/li>\n<li>Change RockDB\u2019s port from custom to the original one.<\/li>\n<li>Enjoy!<\/li>\n<\/ol>\n<h3>Updating database indexes<\/h3>\n<p>Any indexing strategy is based on two things: how the data will be read and the advantages\/disadvantages of each type of indexing. Of course, the need to keep indexes up-to-date is a known rule.<\/p>\n<p>When we are adding new user features to the mobile app, we need to update the database model accordingly. It means that we may need to update indexes too. However, users don\u2019t update their apps quickly: along with the new features you also need to support old ones, and thus you get old requests and old indexes.<\/p>\n<p>Even when most users have updated their apps to the new versions, we tend to forget to remove old indexes, which leads to slower performance. Eventually, we created a configuration file for storing indexes and a script for updating them efficiently.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script.png\"><img loading=\"lazy\" class=\"wp-image-13948\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script.png\" alt=\"Mongo indexes configuration and script\" width=\"509\" height=\"221\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script.png 1218w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-300x130.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-768x333.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-1024x444.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-600x260.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-450x195.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mongo-indexes-configuration-and-script-1000x433.png 1000w\" sizes=\"(max-width: 509px) 100vw, 509px\" \/><\/a><\/p>\n<h3>Removing debug logs<\/h3>\n<p>Although storing debug logs in the primary database doesn\u2019t sound like a good idea at all, some developers tend to put everything in one bucket. Server performance depends on database performance, but when the database is full of debug data, transactions take a longer time to run.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance.png\"><img loading=\"lazy\" class=\"wp-image-13949\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance.png\" alt=\"Mixing up debug logs and user-generated content may slow down database performance\" width=\"740\" height=\"297\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance.png 1738w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-300x120.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-768x308.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-1024x411.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-600x241.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-450x181.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Mixing-up-debug-logs-and-user-generated-content-may-slow-down-database-performance-1000x402.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>It\u2019s important to distinguish user-generated data from service data (<a href=\"http:\/\/datawarehouse4u.info\/OLTP-vs-OLAP.html\">OLTP vs OLAP<\/a>), and to handle them with the appropriate instruments. If you need to store and analyze a lot of logs, take a look on the <a href=\"https:\/\/www.elastic.co\/webinars\/introduction-elk-stack\">ELK stack<\/a>, or create a separate database for tracking user activities.<\/p>\n<p>Furthermore, cleaning old and unneeded logs helps to keep your database healthy.<\/p>\n<h3>Removing old files, cleaning up a database<\/h3>\n<p>No need to explain: some data has an expiration time, so it can be removed after that. If you don\u2019t remove old data, sooner or later your collections will look like a dump. No one wants to search for valuable data inside a dump.<\/p>\n<p>We don\u2019t remove data manually, instead we\u2019ve created cron jobs to remove it once a week.<\/p>\n<p>(The tricky question is: how to understand what data can be removed without consequences. It totally depends on your product and the logic behind it.)<br \/>\n[custom_form form=&#8221;form-inline-subscribe&#8221; topic=&#8221;Development&#8221;]<\/p>\n<h2>Optimizing requests<\/h2>\n<h3>Grouping requests and minimizing transferred data<\/h3>\n<p>Users prefer simple interfaces, especially when they need to fill in a lot of data. Splitting large forms into several simple steps improves UX and makes users happy, but sending server requests on each screen is overloading the server.<\/p>\n<p>Instead of sending multiple requests, the app should remember the user\u2019s choice and store it until the user completes the form. After that the app sends all input data in a single request. Of course, this strategy doesn\u2019t suit every situation, but consider it next time.<\/p>\n<p>A similar idea is request cancellation. Let\u2019s imagine that the user presses the \u2018like\u2019 button multiple times; instead of sending a \u2018like\u2019 request for every tap, an application should cancel insignificant requests and send the resulting value only. This approach requires more time and wise thinking, but it\u2019s easy to implement: you can read more about it in the <a href=\"https:\/\/stanfy.com\/blog\/optimistic-models-%E2%80%8Ahandling-multiple-interactions-without-server-confirmation\/\">Optimistic Models Part 2<\/a> post.<\/p>\n<p><img loading=\"lazy\" class=\"wp-image-13951\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data.jpg\" alt=\"Compartmentalization is the idea of accessing only the required data\" width=\"740\" height=\"233\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data.jpg 1220w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-300x94-1.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-768x242-1.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-1024x322-1.jpg 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-600x189-1.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-450x142-1.jpg 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Compartmentalization-is-the-idea-of-accessing-only-the-required-data-1000x315-1.jpg 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/p>\n<p>From the other side, the server should send only the required data. Compartmentalization is the idea of limiting access to information only to those who need it now. For example, if the application needs to display the user\u2019s photo and name, the server should send the minimum required information, instead of sending the whole user record stored in the server database.<\/p>\n<h2>Results<\/h2>\n<p>Using the techniques described above we decreased response time by 100 and improved the Apdex Index from \u201cunacceptable\u201d to \u201cexcellent\u201d (according to the NewRelic monitoring).<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats.png\"><img loading=\"lazy\" class=\"wp-image-13952\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats.png\" alt=\"Screenshot from NewRelic dashboard\" width=\"740\" height=\"873\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-254x300.png 254w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-768x906.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-868x1024.png 868w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-600x708.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-381x450.png 381w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Screenshot-from-NewRelic-dashboard-deploy-stats-848x1000.png 848w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>Of course, those techniques may not suit for your backend, however they are based on the simple ideas:<\/p>\n<ul>\n<li>manage data carefully;<\/li>\n<li>do not store unneeded data;<\/li>\n<li>minimize traffic.<\/li>\n<\/ul>\n<p>Let us know what techniques do you use to keep your servers in shape!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Imagine that you\u2019re building an outstanding mobile application that needs server side support for certain features, like syncing user data or showing posts from other users. <\/p>\n","protected":false},"author":63,"featured_media":13945,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[800],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Learn how to improve Node.js server response time based on our personal experience. Useful information for backend developers who want to enhance their skills.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Node.js Server Response Time: ImprovingPerformance\" \/>\n<meta property=\"og:description\" content=\"Learn how to improve Node.js server response time based on our personal experience. Useful information for backend developers who want to enhance their skills.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2017-02-02T16:38:53+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-10-23T10:11:10+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/How-We-Improved-Node-js-Server-Performance.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2200\" \/>\n\t<meta property=\"og:image:height\" content=\"1200\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/How-We-Improved-Node-js-Server-Performance.jpg\",\"width\":2200,\"height\":1200,\"caption\":\"How We Improved Node-js Server Performance\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/\",\"name\":\"Node.js Server Response Time: ImprovingPerformance\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/#primaryimage\"},\"datePublished\":\"2017-02-02T16:38:53+00:00\",\"dateModified\":\"2019-10-23T10:11:10+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Learn how to improve Node.js server response time based on our personal experience. Useful information for backend developers who want to enhance their skills.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/we-improved-node-js-server-response-time-by-100-times\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13937"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=13937"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13937\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/13945"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=13937"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=13937"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=13937"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}