{"id":16278,"date":"2019-02-28T20:38:53","date_gmt":"2019-02-28T17:38:53","guid":{"rendered":"https:\/\/www.intellectsoft.net\/blog\/?p=16278"},"modified":"2020-01-14T19:32:32","modified_gmt":"2020-01-14T16:32:32","slug":"hbase-vs-cassandra","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/","title":{"rendered":"HBase vs Cassandra: Compare Architecture, Performance &#038; Use Cases"},"content":{"rendered":"\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<p>Choosing the right database management system is key to ensuring an effective, streamlined software development process and a successful final result. Still, selecting the the right system for your project is not that easy, as there are always details to consider almost at every turn, especially when it comes to the overall performance of a database management system for your process and project.<\/p>\r\n\r\n\r\n\r\n<p>In this article, we will take an in-depth look at arguably the most popular systems and how they compare to one another \u2014 HBase vs Cassandra. We will explore the essentials, use cases, features, architectures, performance and more.<\/p>\r\n\r\n\r\n\r\n<p>Let\u2019s start below.<\/p>\r\n\r\n\r\n\r\n<h2><strong>The Basic Facts for the Cassandra vs HBase Comparison<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Both Cassandra and HBase are database management systems aimed at speeding up the software development process. Introduced in 2016 and written in Java, HBase is an open-source tool for large-scale projects (Facebook had been using Apache HBase 2010 through 2019). Meanwhile, Cassandra saw the light of the digital day in 2008 and also became highly popular among IT professionals.<\/p>\r\n\r\n\r\n\r\n<h2><strong>What is HBase?<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img loading=\"lazy\" width=\"470\" height=\"120\" class=\"wp-image-16279\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-HBase.png\" alt=\"Apache HBase\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-HBase.png 470w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-HBase-300x77.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-HBase-450x115.png 450w\" sizes=\"(max-width: 470px) 100vw, 470px\" \/><\/figure>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<p>HBase is a scalable, distributed, column-based database with a dynamic diagram for structured data. It allows for reliable and efficient management of large data sets (several petabytes or more) distributed among thousands of servers. HBase is modeled by Google Bigtable and is a part of Apache Software Foundation\u2019s Hadoop project.<\/p>\r\n\r\n\r\n\r\n<h2><strong>HBase Architecture &amp; Structure<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>HBase is a unique database that can work on many physical servers at once, ensuring operation even if not all servers are up and running. The system architecture of HBase is quite complex compared to classic relational databases.<\/p>\r\n\r\n\r\n\r\n<p>HBase uses two main processes to ensure ongoing operation:<\/p>\r\n\r\n\r\n\r\n<p><strong>1. Region Server<\/strong> can support multiple regions. Here, a region is an array of records corresponding to a specific range of consecutive RowKey. In addition, each region has:<\/p>\r\n\r\n\r\n\r\n<ul>\r\n<li><strong>Persistent Storage, <\/strong>which is a permanent storage location for data in HBase. Files are used in HDFS storage in a unique document format \u2014 HFile. RowKey sorts data of this type and distributes them into pairs (region or colonies). Each created pair corresponds to one HFile.<\/li>\r\n<li><strong>MemStore<\/strong> is a write buffer where anything that is written to HBase is stored. When MemStore reaches a certain size, the data is written to a new HFile.<\/li>\r\n<li><strong>BlockCache<\/strong> \u2013 read cache. Allows you to significantly save time on data that is read frequently.<\/li>\r\n<li><strong>Write Ahead Log (WAL)<\/strong>. When the data is being written into the memstore, there is a risk of losing it. WAL saves all operations before prior to the implementation. If something happens, the data can be recovered.<\/li>\r\n<\/ul>\r\n\r\n\r\n\r\n<p><strong>2. Master Server<\/strong> is the main server of the Apache HBase. The master manages the distribution of regions across the Region Server, monitors the regions, manages the running of ongoing tasks and performs a number of other important tasks.<\/p>\r\n\r\n\r\n\r\n<p>To coordinate actions between services, HBase uses Apache ZooKeeper, a special service for managing configurations and synchronization of services.<\/p>\r\n\r\n\r\n\r\n<p>As the amount of data in a region increases and it reaches a certain size, HBase starts the split, an operation that divides the region by two. To avoid permanent divisions of the regions, you can pre-set the boundaries of the regions and increase their maximum size.<\/p>\r\n\r\n\r\n\r\n<p>Since data for one region can be stored in several HFiles, HBase periodically merges them together to speed up the operation. This is called compaction.<\/p>\r\n\r\n\r\n\r\n<p>Compactions come in two forms:<\/p>\r\n\r\n\r\n\r\n<ul>\r\n<li><strong>Minor Compaction<\/strong> runs automatically in the background. It has low priority compared to other HBase operations.<\/li>\r\n<li><strong>Major Compaction.<\/strong> It can be started manually or triggered (for example, by a timer). It has high priority and can significantly slow down the work of the cluster. The best time to perform Major Compactions is when the cluster load is low. During Major Compaction, data labeled <em>tombstone<\/em> is deleted.<\/li>\r\n<\/ul>\r\n\r\n\r\n\r\n<h2><strong>HBase Use Cases<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>It can be said that HBase was created to automate Google\u2019s internal processes, but it was also being used to manage file systems around the world. Apache HBase operates on top of the HDFS distributed file system and provides BigTable-like features for Hadoop, that is, it provides a fault-tolerant way of storing large amounts of sparse data. HBase stores file data in tables, which have rows and columns, and resembles standard Excel sheets. The table rows are sorted by the key of the rows (the primary key of the table), while the sorting is performed in the order of bytes. All calls to the table are made on the primary key. Columns are combined into column families, and all members of the column family have a common prefix.<\/p>\r\n\r\n\r\n\r\n<h2><strong>HBase Example<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Apache HBase is able to scale standard Excel tasks towards web development. Among the many features of the system are the following:<\/p>\r\n\r\n\r\n\r\n<ul>\r\n<li>RowKey is the primary identifier of the document (it should be called that way)<\/li>\r\n<li>Families or named sets, one key can be used to reach different sets.<\/li>\r\n<li>Secondary key in family-set<\/li>\r\n<li>Time \u2013 the built-in value of HBase, the default is the time to add, but it can be changed<\/li>\r\n<li>Value<\/li>\r\n<\/ul>\r\n\r\n\r\n\r\n<p>HBase allows you to do MapReduce tasks that are naturally slower than Hadoop tasks, because these systems were designed for different purposes. HBase is an online system, Hadoop is aimed at offline operation. Notably, different sets of keys are in different ColumnFamily files, and if you use several machines to quickly extract the value, it is advisable to refer to one ColumnFamily.<\/p>\r\n\r\n\r\n\r\n<h2><strong>HBase Performance<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>HBase can use HDFS as a server-based distributed file system. However, the default block size is completely different. HBase\u2019s default block size is 64 KB, while HDFS uses at least 64 MB.<\/p>\r\n\r\n\r\n\r\n<p>Blocks are used for different things in HDFS and HBase. HDFS blocks are disk storage units. Blocks in HBase are for memory storage. There are many HBase blocks that fit into one HBase file.<\/p>\r\n\r\n\r\n\r\n<p>HBase is designed to maximize the performance of the HDFS file system, and they fully utilize the block size. Some experts even set up their HDFS to have a block size of 20 GB to make HBase more efficient.<\/p>\r\n\r\n\r\n\r\n<h2><strong>HBase vs Cassandra: How Does Cassandra Measure Up?<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Apache Cassandra is very similar to HBase, but has its own individual advantages and disadvantages. If for you it is only HBase vs Cassandra, let\u2019s have an in-depth overview of the latter.<\/p>\r\n\r\n\r\n\r\n<p>Cassandra Apache belongs to the class of NoSQL-systems and is designed to create scalable and reliable repositories of huge data arrays represented as hash.<\/p>\r\n\r\n\r\n\r\n<p>Let\u2019s explore the essentials.<\/p>\r\n\r\n\r\n\r\n<h2><strong>What is Apache Cassandra<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image is-resized\"><img loading=\"lazy\" class=\"wp-image-16280\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-1024x687.png\" alt=\"\" width=\"467\" height=\"313\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-1024x687.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-300x201.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-768x515.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-600x402.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-450x302.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra-1000x671.png 1000w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Apache-Cassandra.png 2000w\" sizes=\"(max-width: 467px) 100vw, 467px\" \/><\/figure>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<p>Apache Cassandra works with key space, which corresponds to the concept of a database schema in the relational model. There can be several column families in this key space, which corresponds to the concept of a relational table. In turn, the column families contain columns that are combined with a key in the RowKey record.<\/p>\r\n\r\n\r\n\r\n<p>The column consists of three parts \u2014 name, timestamp, and value.<\/p>\r\n\r\n\r\n\r\n<p>The columns within the record are set in a particular order. Unlike a relational database, there are no restrictions on whether records contain columns with the same names as in other records. Column families of the system can have several types.<\/p>\r\n\r\n\r\n\r\n<h2><strong>Apache Cassandra Architecture<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>The basic idea behind Cassandra\u2019s architecture is the token ring.<\/p>\r\n\r\n\r\n\r\n<p>There are a number of servers in the cluster. For example, there are 4 of them (see the picture below). We will assign a token to each server. This is, roughly speaking, a certain number. But first, we need determine what our keys are in general.<\/p>\r\n\r\n\r\n\r\n<p>Let\u2019s say we have 64\u2013bit keys. Accordingly, we will assign a 64\u2013bit token to each server. After that, we will line them up in a circle, and according to this, sort the tokens. Each server will be responsible for one of the token ranges.<\/p>\r\n\r\n\r\n\r\n<p>Here, the picture is pretty clear. For example, a T1 server is responsible for tokens from T1 inclusive to T2, and so on. This is the main idea of the \u200b\u200bCassandra Apache architecture:<\/p>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh4.googleusercontent.com\/n4Zv6Z1GrsaNG3yD0BEoLXGJyCRhWDSTmf3Qk_Y2zr9gHLNrVKWX34YlWdafujwUzFfzTj_06u9aFvGF1IFg3dA8v2ZnUM5CWhk4mnQRtS2vP9rDsr0mzvfI0U0bra5h2BQPbQQG2wVbyA5TOw\" alt=\"Cassandra Apache\" \/><\/figure>\r\n\r\n\r\n\r\n<p style=\"text-align: center;\"><em>Apache HBase vs Cassandra: Token ring concept visualisation <\/em><\/p>\r\n\r\n\r\n\r\n<h2><strong>Apache Cassandra Example<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Let&#8217;s look at one of the examples of searching for a query through Cassandra Apache. It consists of a set of storage nodes, and stores each row in one of these nodes. In each row, Cassandra Apache always stores columns sorted by name. Thanks to this sorting order, Apache Cassandra supports partitioned queries when a user, by specifying a row, can receive a corresponding subset of columns in a given range of column names. For example, a partitioned query with the <em>tag0\u2013tag9999<\/em> range will result in all columns whose names are between<em> tag0<\/em> and<em> tag9999<\/em>.<\/p>\r\n\r\n\r\n\r\n<h2><strong>Apache Cassandra Performance<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Cassandra Apache is the only database where writing is faster than reading. This is due to the fact that writing to it successfully ends (in the fastest version) immediately after writing to the log (on disk). But reading requires checks, several reads from the disk, and choosing the most recent entry.<\/p>\r\n\r\n\r\n\r\n<p>Cassandra Apache is a reliable data archive that scales fairly quickly. The development community constantly updates Cassandra to make it easier, faster, and more time-efficient for software engineers.<\/p>\r\n\r\n\r\n\r\n<p>The editors of one of the IT portals conducted an experiment that showed how Apache Cassandra compares to Mongodb, a cross-platform document-oriented database program. See the chart below:<\/p>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh5.googleusercontent.com\/_3uQPVOrFr5NHvXyRKm5sB-4L6_cih_24CF0KXllmAD35RZtRZgn6WjXvlUUSZvQ8bS0_IC7Ov6XIsD3I0B2kT1tDBRI1fI1j8-pJtX9y-T41S27fIoSsnHkTQEfbKd15qLk5qmnG20URGyTHg\" alt=\"Apache Cassandra\" \/><\/figure>\r\n\r\n\r\n\r\n<p style=\"text-align: center;\"><em>HBase vs Cassandra: How does the latter measure up to other systems<\/em><\/p>\r\n\r\n\r\n\r\n<h2><strong>HBase vs Cassandra: Performance<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Both file storage systems have leading positions in the market of IT products. The type of operation of the two platforms on the servers is very similar.<\/p>\r\n\r\n\r\n\r\n<p>It is worth noting that HBase separates data logging and hash into two stages, while Cassandra does it simultaneously. HBase also has a rather complex architecture compared to its competitor.<\/p>\r\n\r\n\r\n\r\n<p>When a client is searching for the right server, they request the presence of a meta table that contains all the cluster files. It is necessary to request information about the owner of the data within the table. If file location changes, the program must re-complete the full cycle of work. Here, Cassandra has a more fitting structure, which largely affects the speed of the system.<\/p>\r\n\r\n\r\n\r\n<h2><strong>Cassandra vs HBase Benchmark<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>When it comes to Apache Cassandra vs HBase benchmarks, both use linear scaling, so they have approximately the same benchmark. Despite that, they show completely different test results.<\/p>\r\n\r\n\r\n\r\n<p>HBase showed the best results in the use of loads when reading data. It copes well with high loads when working with files and scanning large tables.<\/p>\r\n\r\n\r\n\r\n<p>On the other hand, Cassandra did a consistently good job with a large load for writing. Thus, it is more suitable for collecting analytics or data from sensors when time consistency is acceptable.<\/p>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh4.googleusercontent.com\/JkiJ4BKzUEQ-Wle_qCKTvoAJ7ol9Fj3DHoXh3NGfs1-qohfL0tDdKUFaJYlqA35JMEELdqGd8zeIIFcOOG-VcwISdqnW4aHU5HnWVv2hFuuz5lFZDoajFgfQwwyFqUlOqnZVR58wzKcg6hU1hQ\" alt=\"Apache HBase vs Cassandra\" \/><\/figure>\r\n\r\n\r\n\r\n<p style=\"text-align: center;\"><em>Cassandra vs HBase test<\/em><\/p>\r\n\r\n\r\n\r\n<h2><strong>Cassandra vs HBase: Features<\/strong><\/h2>\r\n\r\n\r\n\r\n<p>Trying to determine which of the two databases is best for you really depends on the project in question. Each has its advantages and sometimes the choice would merely depend on personal preferences in carrying our software development.<\/p>\r\n\r\n\r\n\r\n<p>You can choose the most suitable platform based on these comparisons:<\/p>\r\n\r\n\r\n\r\n<ul>\r\n<li>HBase handles 1000 nodes while Cassandra can help with approximately 400 nodes<\/li>\r\n<li>HBase and Cassandra both support replication between clusters\/data centers HBase provides more to the user, so it looks more complicated, but then you also get more flexibility<\/li>\r\n<\/ul>\r\n\r\n\r\n\r\n<ul>\r\n<li>If strong consistency is what your application needs, then HBase is probably the best fit. It is designed from the ground up to be consistent. For example, it allows for simplifying the implementation of atomic meters, as well as <em>checking<\/em> and <em>locating<\/em>.<\/li>\r\n<li>The performance track record of HBase is solid \u2014 \u00a0Facebook used it for almost ten years. Here, the winner in Cassandra vs HBase is evident.<\/li>\r\n<li>Current version of Cassandra prepares the separator, but in the past it needed manual rebalancing. HBase handles this automatically if you do not want manual control. The ordered delimiter is important for processing in a way that is similar to Hadoop.<\/li>\r\n<li>Cassandra and HBase are both complicated; Cassandra is simpler only at first sight. HBase and Cassandra are both multi-layered, and if you compare the documents of Dynamo and Bigbit, you will see that the theory behind Cassandra is actually more complex.<\/li>\r\n<li>HBase has more FWIW unit tests.<\/li>\r\n<li>The Cassandra RPC is Thrift, while HBase has Thrift, REST, and native Java. Thrift and REST only offer a subset of the full client API, but if you want to get pure speed, you have to use your own Java client.<\/li>\r\n<\/ul>\r\n","protected":false},"excerpt":{"rendered":"<p>&nbsp; Choosing the right database management system is key to ensuring an effective, streamlined software development process and a successful final result. Still, selecting the&#8230;<\/p>\n","protected":false},"author":63,"featured_media":16281,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Explore the top database management systems in our HBase vs Cassandra comparison. Find out about the tables in HBase, Apache Cassandra architecture, and more.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"HBase vs Cassandra: In-Depth Comparison\" \/>\n<meta property=\"og:description\" content=\"Explore the top database management systems in our HBase vs Cassandra comparison. Find out about the tables in HBase, Apache Cassandra architecture, and more.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2019-02-28T17:38:53+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-01-14T16:32:32+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sea-of-Code.jpeg\" \/>\n\t<meta property=\"og:image:width\" content=\"1500\" \/>\n\t<meta property=\"og:image:height\" content=\"1000\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sea-of-Code.jpeg\",\"width\":1500,\"height\":1000,\"caption\":\"HBase vs Cassandra\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/\",\"name\":\"HBase vs Cassandra: In-Depth Comparison\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/#primaryimage\"},\"datePublished\":\"2019-02-28T17:38:53+00:00\",\"dateModified\":\"2020-01-14T16:32:32+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Explore the top database management systems in our HBase vs Cassandra comparison. Find out about the tables in HBase, Apache Cassandra architecture, and more.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/hbase-vs-cassandra\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/16278"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=16278"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/16278\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/16281"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=16278"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=16278"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=16278"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}