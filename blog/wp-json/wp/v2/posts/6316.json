{"id":6316,"date":"2014-09-04T15:46:00","date_gmt":"2014-09-04T12:46:00","guid":{"rendered":"https:\/\/stanfy.com\/?p=6316"},"modified":"2019-12-23T14:25:56","modified_gmt":"2019-12-23T11:25:56","slug":"icfp-2015-intellectsoft-team-report-2","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/","title":{"rendered":"ICFP 2014 Intellectsoft+ Team Report"},"content":{"rendered":"<p>I just have to say that it is an annual competition, which is held within\u00a0<a href=\"http:\/\/icfpconference.org\/\">ICFP Conference<\/a>. The detailed information about the Contest can be found in\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/ICFP_Programming_Contest\">Wikipedia<\/a>. In general, each year there is a new 72-hour task to be completed.<\/p>\n<p>The number of people on the team is not limited; there is no restriction on the programming language either. That is, it is possible for 72 hours to plunge into the world of problems that this year\u2019s organizers have created and come back with a bunch of impressions.<\/p>\n<p>Of course, if such things interest you. On my own behalf for people who first hear about it, I would recommend to read \u00a0adept&#8217;s\u00a0report(Russian language) on participation in 2006 ICFP Contest. This report is a kind of classic. Just so, after reading this report I had a great desire to take part in this competition.<\/p>\n<h2><strong>Getting Ready!<\/strong><\/h2>\n<p>Each year, all our colleagues think of the programming language to use for performing the task. And each time after ongoing arguments we choose Java. It just happened, so this year was not going to be an exception, and we definitely used Java application, but as it turned out later, not only it.<\/p>\n<h3><strong>Day One (Friday) (The Contest Starts At 15:00)<\/strong><\/h3>\n<div>\n<p>In the office, just at that time all the competitors had a small rush job to do, that is why we started reading the task only at 18:00 and later. The task, by the way, turned out to be quite extensive, and was composed of 27 pages of A4. There were quite a bit of irrelevant information concerning manuals for different processors. We started reading the documentation. And, I need to say &#8211; after a busy working week \u2013 it goes too hard.<\/p>\n<h4><strong>Task<\/strong><\/h4>\n<\/div>\n<p>In order to win the contest this year, it was necessary to write a program for Lambda-Man, who has to run away from the ghosts through the field, where alongside with the ghosts there were pills, large pills, fruits &#8230; and I have to say, that\u2019s it. After eating a large pill located on the map, LMan within a limited time gets a chance to make a feast of ghosts without any table-ware. For any positive actions LMan performs, he receives the corresponding number of points<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false trim-whitespace:false lang:java decode:true \">- pill - 10 points\r\n- large pill - 50 points\r\n- ghost - 200-1600 points\r\n- fruits - 100-5000 points<\/pre>\n<p>&nbsp;<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-6302\" title=\"LMan_ICFP_Stanfy\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/LMan_ICFP1.png\" alt=\"\" width=\"460\" height=\"440\" \/><\/p>\n<p>If you are familiar with the old classic games, then you must have immediately realized that I am referring to <a href=\"https:\/\/ru.wikipedia.org\/wiki\/Pac-Man\"><span style=\"text-decoration: underline;\">Pac-Man<\/span><\/a>.<\/p>\n<p>That is, for the task to be completed it is supposed to create a sequence of actions for PacMan &#8230;. written in assembly language for Lambda-Man CPU. &#8220;Forget your favorite programming language for another 72 hours! You will write in assembler language during the next 3 days.&#8221;<\/p>\n<h4><strong>Lambda-Man CPU<\/strong><\/h4>\n<p>Processor Lambda-Man turned out to be a little strange. It consisted of four registers, but we did not have direct access to them, 3 stacks, and 27 instruction statements. It wasn\u2019t the first time I had heard of this type of processor, but I had never before programmed for it. Here is an example of a simple program that calls the function with one parameter for LMCPU<\/p>\n<p>&nbsp;<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">Minimal example of creating and using a local variable.\r\nLDC\u00a0 21\r\nLDF\u00a0 body\u00a0\u00a0\u00a0\u00a0 ; load body\r\nAP\u00a0\u00a0 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ; call body with 1 variable in a new frame\r\nRTN\r\nbody:\r\nLD\u00a0\u00a0 0 0\u00a0\u00a0\u00a0\u00a0\u00a0 ; var x\r\nLD\u00a0\u00a0 0 0\u00a0\u00a0\u00a0\u00a0\u00a0 ; var x\r\nADD\r\nRTN<\/pre>\n<p>&nbsp;<\/p>\n<p><strong>19:56 (4 hours after the start)<\/strong><\/p>\n<p>We held the first general meeting of our team, and made the following decision<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">- We will write the program in a high level language which is compiled in LMCPU\r\n- One of us will be in charge of collecting the resulting task\r\n- High-level language we are going to use will be Clojure\r\n- We will not write their own processor implementation, because the organizers gave us a chance to test our programs\/software in their implementation, written in JS\r\n<\/pre>\n<h4><strong>Clojure<\/strong><\/h4>\n<p>Why Clojure after all?\u00a0 Participating in this competition I have asked this question\u00a0\u00a0 more than once. The basic idea was that assembler for LMCPU was specifically invented to make it easy to compile from the Lisp-like functional language. For compiler generation we use <a href=\"http:\/\/www.antlr.org\/\">ANTLR<\/a>, but we did not find proper grammar description for Lisp, that..can work with ANTL. The closest language appears to be <a href=\"http:\/\/clojure.org\/lisps\">Clojure<\/a>.<\/p>\n<p><strong>21:18 (6 hours after the start)<\/strong><\/p>\n<p>We have a semi-automatic build of our task to be further sent for scoring.\u00a0 <a href=\"https:\/\/github.com\/roman-mazur\">R\u043e\u043c\u0430<\/a> is working at creating a compiler with Clojure * <a href=\"https:\/\/github.com\/bexcite\">\u00a0Pasha<\/a> \u00a0and I are looking into assembler and playing in HTML + JS, which the organizers provided.<\/p>\n<p>What appeared to be an unpleasant surprise for us was that labels used in the examples on this site did not work, (So we had to tweak JS a little by introducing additional constants and labels)<\/p>\n<p><em>Before<\/em><\/p>\n<p>&nbsp;<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false trim-whitespace:false lang:default decode:true \">LDC\u00a0 0\r\nLDF\u00a0 4\r\nCONS\r\nRTN\r\nLDC\u00a0 0\r\nLDC\u00a0 1\r\nCONS\r\nRTN<\/pre>\n<p>&nbsp;<\/p>\n<p><em>After<\/em><\/p>\n<p>&nbsp;<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false trim-whitespace:false lang:default decode:true \">LDC\u00a0 0\r\nLDF\u00a0 step_function\r\nCONS\r\nRTN\r\nstep_function:\r\nLDC\u00a0 0\r\nLDC\u00a0 DIRECTION_UP\r\nCONS\r\nRTN<\/pre>\n<p>&nbsp;<\/p>\n<p>In addition, <a href=\"https:\/\/github.com\/lampapos\">Misha<\/a> and all the others started learning Closure as quick as they could, so that by the time we have a compiler, we could write something in Clojure. We got all the information for our learning at the site <a href=\"http:\/\/clojurekoans.com\/\">Clojure Koans<\/a>.<\/p>\n<p><strong>23:30 (8 hours after the start)<\/strong><\/p>\n<p>We have a parsed Clojure tree by\u00a0 <a href=\"https:\/\/github.com\/roman-mazur\">R\u043ema<\/a>.<\/p>\n<p><strong>01:00 (10 hours after the start)<\/strong><\/p>\n<p>I estimated the rate at which we master Clojure, and realized that the pace we did would take us to nowhere.\u00a0 (It was a dead-end job. Perhaps,\u00a0 that\u2019s my own opinion about what happened, but my brain gave up the idea of writing on Clojure, and wanted to write on something closer and easier to me;); for example, ECMAScript (a-ka JavaScript). Moreover, at this stage it was clear that high-level language in which we write will hardly resemble Clojure.\u00a0 Any high-level language we\u2019re going to use will very vaguely resemble the language, the grammar of which it uses.<\/p>\n<p><strong>02:34 (11,5 hours after the start)<\/strong><\/p>\n<p><span style=\"text-decoration: underline;\">Pasha<\/span> is mastering the instruction of\u00a0 DBUG processor, and finally we see how the incoming data will look like.<\/p>\n<p>LMan state:<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">(0, ((11, 16), (2, (3, 0))))\r\n<\/pre>\n<p>Ghosts state:<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">((0, ((11, 8), 2)), ((0, ((10, 10), 2)), ((0, ((11, 10), 2)), ((0, ((12, 10), 2)), 0))))\r\n<\/pre>\n<p>Map:<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">((0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, (0, (2, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (2, (0, (0, (0, (2, (0, 0))))))))))))))))))))))), ((0, (3, (0, (0, (0, (2, (0, (0, (0, (0, (2, (0, (2, (0, (0, (0, (0, (2, (0, (0, (0, (3, (0, 0))))))))))))))))))))))), ((0, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (2, (0, 0))))))))))))))))))))))), ((0, (2, (0, (0, ...\r\n<\/pre>\n<p><strong>02:10<\/strong><\/p>\n<p>My compiler with ECMAScript has started giving the first sparks of life.<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">var f = 2; f++;\r\nvar b = 5;\r\nvar c = f + b;\r\n<\/pre>\n<p>And then I realized that a simple test &#8220;that it generates,&#8221; will not be enough for me. Of course, each time I could check the assembler that was generated directly in HTM from the organizers themselves, but it was not enough, and it was not fairly quickly either. Moreover, hacking something was very easy, and every time to test generation manually is not rational.<\/p>\n<p>That is why I decided that in the process of testing I wouldn\u2019t rather use assembler that has to be generalized but give preference to the state of the processor after the program completion.<\/p>\n<p>I spent two hours searching the library for Java, which was able to load and interpret Javascript from organizers. But all Java libraries refused to load and perform that man.js of 3,3Mb. They all showed the error &#8220;Code is too large&#8221;.<\/p>\n<p>Integration tests with the browser I also seemed not a very good idea, so I decided to write an emulator LMan CPU.<\/p>\n<p><strong>05:43<\/strong><\/p>\n<p>Most processor instructions were emulated, and when someone just started waking up I went to bed at last.<\/p>\n<h3><strong>Day two (Saturday)<\/strong><\/h3>\n<p>While I was still sleeping, <a href=\"https:\/\/github.com\/roman-mazur\">R\u043e\u043c\u0430<\/a>\u00a0continues to write Clojure compiler. One by one, the instructions are added, and the tests for the compiler looks approximately as follows<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">test(\r\n\"(+ 2 4)\",\r\n\"LDC 2\\n\",\r\n\"LDC 4\\n\",\r\n\"ADD\"\r\n);\r\n<\/pre>\n<p><strong>10:15<\/strong><\/p>\n<p>I wake up, join him and realize that I missed the point that in case of failure or improper format instructions or valueson stack registers, the processor will fall into catatonia. I quickly make the correction, gradually introducing checks for data types used.<\/p>\n<p>While\u00a0 <a href=\"https:\/\/github.com\/lampapos\">\u041c\u0456sh\u0430<\/a> got sick, unable to bear sitting under the air conditioner in the fierce heat, <a href=\"https:\/\/github.com\/vixentael\">Anastasia<\/a> comes and helps me finish all the instructions of the processor with failed states. Meanwhile <a href=\"https:\/\/github.com\/bexcite\">P\u0430sh\u0430<\/a> is sitting and analyzing the data structures in assembler<\/p>\n<p><strong>12:46<\/strong><\/p>\n<p>Our processor is finally able to fully emulate all the necessary instructions and the first test clearly demonstrates it<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">\/\/(&gt; (+ (- 3 1) (* 2 2)) (== 2 2))\r\nArrayList instructions =\r\nLambdaManProcessor.parseAsmProgram(\r\n\"LDC 3\\n\"+\r\n\"LDC 1\\n\"+\r\n\"SUB\\n\"+\r\n\"LDC 2\\n\"+\r\n\"LDC 2\\n\"+\r\n\"MUL\\n\"+\r\n\"ADD\\n\"+\r\n\"LDC 2\\n\"+\r\n\"LDC 2\\n\"+\r\n\"CEQ\\n\"+\r\n\"CGT\");\r\nprocessor = new LambdaManProcessor(instructions);\r\nprocessor.run();\r\nassert(processor.topStackValue().equals(1)); \/\/ result of expression\r\n<\/pre>\n<p>We are chuckling at the work done, reports to Roma that now it\u2019s possible to feed the results of program compilation with Clojure to the processor emulator, and verify the correctness of the processor status. It added confidence to our efforts. Now all the programs we are writing, on condition that checks are provided by our emulation processor, will normally run on the processor of the organizers.<\/p>\n<p>Teamed with <a href=\"https:\/\/github.com\/bexcite\">P\u0430sha<\/a>, we check the programs that he had already written on our processor. It works!<\/p>\n<p><strong>13:21<\/strong><\/p>\n<p>Realizing that we did not have time to write anything on Clojure, quickly switch to assembler only and try with <a href=\"https:\/\/github.com\/bexcite\">P\u0430sha<\/a> to write anything that will be able to walk around the map. <a href=\"https:\/\/github.com\/vixentael\">Anastasia<\/a> is preparing everything for us to submit it by the end of Lighting Round (first 24 hours).<\/p>\n<p><strong>14:25<\/strong><\/p>\n<p>The first download of our LMan who just quietly goes one way.<\/p>\n<p><strong>14:28<\/strong><\/p>\n<p>We are loading LMan that is supposed to go by the rule of the right hand through the maze, no matter what.<\/p>\n<p>It was a shame the error in calculating the next direction led to breaking the game. We were very upset that at 0 (top), 1 (right), 2 (down), 3 (left), the game did not understand such a direction as 4;) As a result our decision with Lighting was feeble, and could hardly score any points.<\/p>\n<p><strong>15:00<\/strong><\/p>\n<p>While the organizers are laying out an additional task for the ghosts management, we are having a lunch break.<\/p>\n<p><strong>16:15<\/strong><\/p>\n<p>In the task from the organizers that followed, a test condition is added &#8211; besides the LMan algorithm, additionally, we will have to be sending algorithms for ghosts (up to 4 algorithms). Those algorithms are also supposed be written in assembler.<\/p>\n<p style=\"text-align: center;\"><img class=\"aligncenter wp-image-6305\" title=\"LMan_Stanfy_ICFP\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/LMan_Stanfy_ICFP.jpeg\" alt=\"\" width=\"600\" \/><\/p>\n<p>Only with some restrictions; for example, the assembler for the processor on which the ghosts program are performed, is completely different. It is more like the x86 processor. In addition, the maximum number of instructions for the ghost algorithm should not exceed 256 instructions, that is, in general, very small, for assembler.<\/p>\n<p>So, we decided to split up.\u00a0 <a href=\"https:\/\/github.com\/bexcite\">Pasha<\/a>\u00a0and \u00a0<a href=\"https:\/\/github.com\/vixentael\">Anastasia<\/a>\u00a0 started talking sense\u00a0 into ghosts brains, and we with <a href=\"https:\/\/github.com\/roman-mazur\">Roma <\/a>\u00a0and Oleg began to complicate our owns lives.<\/p>\n<h4><strong>Function Environment Problem<\/strong><\/h4>\n<div>\n<p>The heart of the problem we faced was something like that: Variables that are transferred to function are always stored in the so-called environment (Environment, or ENV) It means that each function can get an access to their variables via ENV.<\/p>\n<p>Something like this:<\/p>\n<p style=\"text-align: center;\"><a href=\"https:\/\/stanfy.com\/blog\/icfp-2015-stanfy-team-report\/attachment\/icfp_2014_stanfy\/\" rel=\"attachment wp-att-6306\"><img class=\"aligncenter wp-image-6306\" title=\"ICFP_2014_Stanfy\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/ICFP_2014_Stanfy.jpeg\" alt=\"\" width=\"600\" \/><\/a><\/p>\n<\/div>\n<p>And compiler when encounters some variable has to convert the access to this variable to the access to ENV at the specific address. Note that, the first parameter &#8211; is the so-called depth environment \u2013 One\u2019s own environment &#8211; always has the value 0, parental environment &#8211; 1, and so on. As follows:<\/p>\n<p style=\"text-align: center;\"><a href=\"https:\/\/stanfy.com\/blog\/icfp-2015-stanfy-team-report\/attachment\/icfp_2014_stanfy_\/\" rel=\"attachment wp-att-6307\"><img class=\"aligncenter wp-image-6307\" title=\"ICFP_2014_STANFY_\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/ICFP_2014_STANFY_.jpeg\" alt=\"\" width=\"600\" \/><\/a><\/p>\n<p>That is, using x, y as a function of first, has to be translated in ENV [0,0], ENV [0,1]. But, using the\u00a0 same variables as a function of second,\u00a0 will\u00a0 look like ENV [1,0], ENV [1,1].<\/p>\n<p>Basically, there is no problem in the generation of such a code. While compilation we can see the level of function, and replace the desired value. This code is generated quite easily.<\/p>\n<p>Problems arise when we use a recursive call.<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-6308\" title=\"ICFP 2015 Stanfy\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/ICFP-2015-Stanfy.jpeg\" alt=\"\" width=\"469\" height=\"860\" \/><br \/>\nAs you can see, the access to one and the same variables from the parent environment has to be translated into different instructions.<\/p>\n<p>It was the problem we were hitting for a long time. For a very long time. Moreover, our lively &#8220;discussion&#8221; of what we primarily need made <a href=\"https:\/\/github.com\/roman-mazur\">R\u043em\u0430<\/a> flee to another room \ud83d\ude42<\/p>\n<p><strong>18:05<\/strong><\/p>\n<p>Our first program in Clojure* that enabled LMan simply walk to the right<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">(defn step [state world] (tuple (0 1)))\r\n(defn main [world anything] (tuple (0 step)))\r\n<\/pre>\n<p>Others keep on thinking about the problem and additionally occasionally write tests for Clojure &#8216;.<\/p>\n<p>Soon there appear <em>if <\/em>\u00a0type operators and basic functions for working with lists <em>first, last, nth<\/em>.<\/p>\n<div align=\"center\">\n<hr align=\"center\" noshade=\"noshade\" size=\"3\" width=\"100%\" \/>\n<\/div>\n<p><a href=\"https:\/\/github.com\/bexcite\">P\u0430sh\u0430<\/a>\u00a0and\u00a0<a href=\"https:\/\/github.com\/vixentael\">Anastasia<\/a> energetically create something like macro-assembler for assembler of ghosts. \u00a0x86 assembler was not really like that. There are no full jump and labels. We immediately decided to use regexps and to replace labels for the number of line, and made our own \u00a0&#8220;functions.&#8221;<\/p>\n<p>We did lack functions, so we had to &#8220;reserve&#8221; the word FUNCTION and RETURN, which were replaced<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">mov h, pc\r\nadd h, 3\r\nmov pc,\" + labelName\r\n<\/pre>\n<p>and<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">mov pc, h\r\n<\/pre>\n<p>accordingly.<\/p>\n<p>We read <a href=\"http:\/\/gameinternals.com\/post\/2072558330\/understanding-pac-man-ghost-behavior\">\u0430lgorithms<\/a> for ghosts in PacMan, it helped us understand what we want to do within the time given. Yes, our ghosts have to run to the LM by the shortest route, but sometimes &#8211; scattered in the corners of the map. The ghosts have different speed, so some may run directly on the box LM, and some &#8211; a few steps ahead of LM (proactively).<\/p>\n<p><strong>21:00<\/strong><\/p>\n<p>As soon as we started active creation of programs in Clojure, we had to tweak DBUG instruction, which produced the value in the grid on the screen. The main &#8220;problem&#8221; of this function was that it &#8220;took off&#8221; the value of the stack top, breaking up the logic of the program. However that problem was also solved. By the way, before that function had been completed, I watched the results of the algorithm work in the direction LMan followed \ud83d\ude42<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">(defn dbg [fn]\r\n(first (tuple (\r\nfn\r\n(DBG fn)\r\n)\r\n))\r\n)\r\n<\/pre>\n<p>We are actively practicing in writing functions in Clojure &#8216;<\/p>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">(defn nextCellByCurrentDirection2 [world direction location]\r\n(if (== direction 0)\r\n(decy location)\r\n(if (== direction 1)\r\n(incx location)\r\n(if (== direction 2)\r\n(incy location)\r\n(if (== direction 3)\r\n(decx location)\r\n(manLocation world)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n(defn nextCellByCurrentDirection [world]\r\n(nextCellByCurrentDirection2 (manDirection world) (manLocation world))\r\n)\r\n<\/pre>\n<p>Quite a big problem was that for the calculation of the data. It was supposed to transfer additional parameters from the higher level to the lower one. It resulted in the situation where the variable <em>world<\/em>, appeared almost in all functions.<\/p>\n<p><strong>23:30<\/strong><\/p>\n<p>Finally we got the first algorithm for LMan that can move by right hand or left hand rule. It was not much, so Anastasia and Pasha\u2019s ghosts quickly caught us, but that was at least something. The ghosts at that moment were able to run to LMan * the shortest way and scatter in different directions. The program for ghosts was the same for all 4, but the initial parameters (Where to run first, how long to run) differed, so our ghosts were running like living things.<\/p>\n<h3><strong>Day three (Sunday)<\/strong><\/h3>\n<p>That night I saw damn brackets in my dreams. I realized that Clojure is certainly the functional language, and so on. For us to create any more or less normal LMan, it is a must to just write the algorithm in that language. \u00a0Especially since Roma added an additional function <em>let<\/em>, which greatly reduced the calls of some functions. Roma even started writing tests in Clojure \ud83d\ude09 and tackled the implementation of <a href=\"http:\/\/uk.wikipedia.org\/wiki\/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%BF%D0%BE%D1%88%D1%83%D0%BA%D1%83_A*\">A-Star<\/a> Besides, addition, many additional functions were added, like filter, map, find, needed for the implementation of A-Star algorithm.<\/p>\n<p>However, the LMan algorithm \u00a0did not come about.<\/p>\n<p>My attempts to write the wave algorithm in Clojure failed and I gave up;)<\/p>\n<p>At 17:30 on the last day I got myself busy with compiler for ECMAScript &#8216;<\/p>\n<h4><strong>Javascript Run<\/strong><\/h4>\n<pre class=\"font-size:18 line-height:26 toolbar:2 show-title:false show-lang:2 striped:false marking:false ranges:false nums:false nums-toggle:false wrap-toggle:false plain:false plain-toggle:false copy:false popup:false expand-toggle:false decode-attributes:false lang:java decode:true \">- 18:37 processing added +,-,DIV,MUL,),( \u0443 JavasScript\r\n- 20:32 function processing, parameter of function, using functions by links\r\n- 22:53 functions of comparison, and if\r\n- 28.07\r\n- 00:21 Variables! It was variables that I lack in Clojure'! Variables!\r\n- 01:36 The first bot on JavaScript\r\n- 03:01 The bot that goes\/ moves by the rule of right hand\r\n- 07:02 Basic wave algorithm that is searching for all the pills or fruits\r\n- 08:24 a little bit accelerated algorithm which at last managed to go through the basic map\r\n- ~~:~~ zzz-zzz-z-z\r\n<\/pre>\n<h4><strong>Ghost<\/strong><\/h4>\n<p>By Sunday evening our ghosts were able to:<\/p>\n<ul>\n<li>Run to LM for n steps<\/li>\n<li>Run proactively \u00a0(in the area of LM square in the direction\u00a0 of its movement)<\/li>\n<li>Scatter into corners (allows to escape the traps of maze)<\/li>\n<li>Scatter if LM has eaten a large pill<\/li>\n<li>Stop doing anything and run to LM if it is nearby (but hasn\u2019t eaten a large pill yet) \u2013 it is our co-called strategy EAT QUICK which we managed to achieve after our ghosts proudly ran passing an accessible LM<\/li>\n<li>Initiate primary parameters according to one\u2019s own number\u00a0 (that is, the ghost strategy is common but all the parameters are set individually)<\/li>\n<\/ul>\n<p>And it was all written in macro-assembler and in different files, then js replaced all labels, constants, processed functions, and created a huge blanket of 200+ lines.<\/p>\n<h3><strong>Day four (Monday)<\/strong><\/h3>\n<p>In the morning, Pasha teamed with Roma, and they continued to implement A * in Clojure &#8216;. Anastasia ran the decision on JS on several maps, and found that on some of them we can even win, but with a small number of points (as ghosts ate LM very well).<\/p>\n<p><strong>14:00<\/strong><\/p>\n<p>Waking up at 13:00 I rejoiced over our algorithm, and ran to fix our LMan\u2019s brain, in order to prevent it from dying of ghosts under any suitable situation. First, we added a little bit of logic; in which case, we can count ghosts as a wall while calculating algorithm. It allowed LManu not to die so often. In addition, if LMan ate a large pill, he didn\u2019t think of ghosts as an obstacle and ignored them at all. There was, of course, an idea of chasing ghosts, in case a large pill was eaten, but it turned out that in this case, LMan died more often \ud83d\ude09<\/p>\n<p><strong>14:53<\/strong><\/p>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=ubkl39zNHy4\">Video of sending our solution<\/a>. Our \u00a0<a href=\"https:\/\/github.com\/stanfy\/icfpc2014\/blob\/develop\/README.md\">link <\/a>\u00a0for the judges who will evaluate context \u00a0( there are some more algorithms descriptions and technical details).<\/p>\n<h4><strong>Results and outcome<\/strong><\/h4>\n<p>Lots of emotions \ud83d\ude09<\/p>\n<p>A little bit upset, of course, that we failed to write more \ud83d\ude42<\/p>\n<p>It is unlikely that our LMan will take a winning prize \ud83d\ude41<\/p>\n<p>Tests! Tests-tests-tests-tests!<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-6301\" title=\"ICFP 2014 STANFY\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2014\/09\/ICFP-2014-STANFY1.png\" alt=\"\" width=\"600\" height=\"258\" \/><\/p>\n<p>In contest like this, when a lot of things are changing and from time to time some people take over others to solve one and the same problem, it is tests that help understand the state of the code.<\/p>\n<p>Concerning minuses &#8211; we have written 2 compilers instead of one;) and, in general, we split into groups with two approaches to the solution of the problem.<\/p>\n<p>Pros of our work \u00a0&#8211; ghost-team (Anastasia and Pasha) proved the viability of the pair-programming model (all Saturday afternoon and Sunday they wrote together).<\/p>\n<p>All in all \u2013 it was fun though exhausting \ud83d\ude09<\/p>\n<p>Next year &#8211; I will certainly participate again<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I just have to say that it is an annual competition, which is held within\u00a0ICFP Conference. The detailed information about the Contest can be found&#8230;<\/p>\n","protected":false},"author":63,"featured_media":14405,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Read the IntellectSoft team report about the ICFP contest. Everything you need to know about the competition, task, process, and results of teamwork.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"IntellectSoft Team Report: Contest Overview\" \/>\n<meta property=\"og:description\" content=\"Read the IntellectSoft team report about the ICFP contest. Everything you need to know about the competition, task, process, and results of teamwork.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2014-09-04T12:46:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-12-23T11:25:56+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/LMan_ICFP1.png\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/LMan_ICFP1.png\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/\",\"name\":\"IntellectSoft Team Report: Contest Overview\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/#primaryimage\"},\"datePublished\":\"2014-09-04T12:46:00+00:00\",\"dateModified\":\"2019-12-23T11:25:56+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Read the IntellectSoft team report about the ICFP contest. Everything you need to know about the competition, task, process, and results of teamwork.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/icfp-2015-intellectsoft-team-report-2\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/6316"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=6316"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/6316\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/14405"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=6316"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=6316"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=6316"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}