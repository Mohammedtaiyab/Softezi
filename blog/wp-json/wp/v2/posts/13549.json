{"id":13549,"date":"2016-08-29T18:00:52","date_gmt":"2016-08-29T15:00:52","guid":{"rendered":"https:\/\/stanfy.com\/?p=13549"},"modified":"2019-09-25T23:26:13","modified_gmt":"2019-09-25T20:26:13","slug":"build-and-run-android-from-aosp-source-code-to-a-nexus-7","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/","title":{"rendered":"Build and Run Android from AOSP Source Code to a Nexus 7"},"content":{"rendered":"<p>Before we go deep into the technical details of building Android from AOSP and installing it on actual hardware, let\u2019s look at a <del>true<\/del> not very true scenario.<\/p>\n<h2>Building a Connected Android-based Bus Stop Display<\/h2>\n<p>Here\u2019s a situation we\u2019ve all been in: imagine you\u2019re running late for an important meeting and you\u2019re waiting nervously at the bus stop. Twenty minutes have gone by and there\u2019s still no trace of it. You\u2019re starting to get edgy.<\/p>\n<p>Hmm, wouldn\u2019t it be useful if you had information about the bus\u2019 location? ? Looks like an idea for a new startup \ud83d\ude42 At first glance it looks complex, but \u201c<em>I\u2019m an engineer. I can do this! ))<\/em>\u201d.<\/p>\n<p>So, let\u2019s start with a simple prototype which can just be an Android app which shows bus locations on the map. You ran it on Nexus 7 and it all looks awesome.<\/p>\n<p>The next question is \u2013 what do we need to be able to deliver such an app as a product? We can enumerate some requirements:<\/p>\n<ul>\n<li>Run in one app mode (or Kiosk mode)<\/li>\n<li>Able to remove all unnecessary services, apps etc.<\/li>\n<li>Easy to update the main app<\/li>\n<li>Device Monitoring and logging<\/li>\n<li>Over-the-air updates<\/li>\n<\/ul>\n<p>We have an unattended Nexus 7 tablet in the office and I think it could be a good start to make a prototype of a bus stop using this device. So, is a Nexus 7 with the stock Android up to the job?<\/p>\n<p>Definitely no, because it has a\u00a0huge number of redundant apps and the user can operate with it like with the usual tablets (open browser, read news, turn off our app and other people can\u2019t get information about bus\u2019 location), but you want to restrict such usage.<\/p>\n<p>There are a couple of ways for us to \u00a0achieve our goals:<\/p>\n<ul>\n<li>make device rooted;<\/li>\n<li>configure a\u00a0device as kiosk mode using <a href=\"https:\/\/developer.android.com\/work\/index.html\">Android for Work<\/a> feature;<\/li>\n<li>create your custom firmware based on AOSP.<\/li>\n<\/ul>\n<p class=\"upgrades\">If you are looking for the help with customization of your own build of Embedded Android that was built\u00a0from AOSP or any other open-source version just\u00a0<a data-sumome-listbuilder-id=\"1d56ac5a-0132-41cd-8202-2e2d7ab93c8a\">let us know.<\/a><\/p>\n<p>The first way looks simple, but it\u2019s not ideal for a huge number of bus stops, because you should hack every new Nexus 7. So in general you will spend a lot of time setting up \u00a0new devices and all your changes will be on existing firmware. Moreover, this way has a significant number of limitations. For example, it will be hard to organize on-air updates.<\/p>\n<p>The second way allows you to automate your installation, but it has a limited number of allowed extensions above base Android. Before you choose this way, you should definitely be aware that you will not be hampered by these limitations. Learn more on <a href=\"https:\/\/developer.android.com\/work\">page<\/a>.<\/p>\n<p>The last way looks more complex than the previous possibilities, \u00a0but the good thing is that you can do what you want without any restrictions.<\/p>\n<h2>Build your own Android<\/h2>\n<p>This article is a part of a bigger\u00a0<a href=\"https:\/\/stanfy.com\/embedded-android\/\">guide about Embedded Android<\/a>\u00a0that intends to cover a broad set of topics about using Android as a platform for embedded devices.<\/p>\n<p>In general, building your own AOSP looks too complicated and it always seems like you will need to spend several weeks setting up the environment and compiling AOSP. Take courage, just follow the guide below and you\u2019ll see how simple it can be.<\/p>\n<h3>1. Choose Android version<\/h3>\n<p>First of all, we need to decide what version of Android firmware we want to build. Today we have Android versions 4.0, 5.0, 6.0 and the new Android N (7.0 Nougat). It looks like a hard decision, but it\u2019s really not too difficult.<\/p>\n<p>There is one simple rule: <strong>you should choose the most recent released version which is available for your device.<\/strong><\/p>\n<p>That means if we want to build a firmware for Nexus 7 we should get the latest stable release for Nexus 7.<\/p>\n<p>We can even use Android N because it already has preview 4, but there are some considerations about using Android N while it\u2019s still in preview:<\/p>\n<ul>\n<li>this is still a preview, which might contain bugs, so you cannot be sure about stability;<\/li>\n<li>release of the Android N can have significant changes after review;<\/li>\n<li>hardware manufacturers only release device drivers for stable versions (more about device drivers in section <a href=\"#Android-AOSP-repo-sync\">Download device drivers<\/a>)<\/li>\n<\/ul>\n<p>So, we need to create a custom firmware for Nexus 7 and the last stable version is <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">6.0.1<\/span>.\u00a0<strong>Let\u2019s build it!<\/strong><\/p>\n<h3>2. Hardware and OS requirements<\/h3>\n<p>Android is not just a simple app, this is a Linux-based operating system which controls your device. In order to build Android OS from source code there are strict requirements for hardware where we can run a build process.<\/p>\n<p>Below is recommended set of configurations for the build machine:<\/p>\n<ul>\n<li><strong>50 GB<\/strong> free hard disk space (required);<\/li>\n<li>min 8GB RAM, recommended <strong>16GB<\/strong>;<\/li>\n<li><strong>2.0 GHz CPU<\/strong> with several cores. This parameter influences build speed &#8211; a more productive CPU means less build time. Moreover, if you have several cores you can parallel build the process (as demonstrated in build section).<\/li>\n<\/ul>\n<p>As for the OS you can use Linux (Ubuntu, Debian, etc) or Mac OS to build firmware, but there is currently no Windows support. If you have Windows you can install a virtual machine with Ubuntu like <a href=\"https:\/\/www.virtualbox.org\/\">VirtualBox<\/a>.<\/p>\n<p>The best solution is to use Mac OS 10.10 or 10.11 or Ubuntu 14-15 because they are the most widely used OSs for building Android OS and you will easily find help and suggestions from the Android community.<\/p>\n<p>In this tutorial I will use MacBook Pro with 2.3 GHz Intel Core i7, 16GB RAM works on OS X El Capitan 10.11.5.<\/p>\n<h3>3. Prepare console<\/h3>\n<p>Open terminal and always use the same console tab for all commands in this tutorial.<\/p>\n<p class=\"upgrades\"><span style=\"color: #ffff00;\"><span style=\"color: #000000;\"><strong>NOTE:<\/strong> It is important to always use the same console tab, each tab has its own environment variables and if you do not follow this recommendation you will have errors<\/span>.<\/span><\/p>\n<pre class=\"lang:default decode:true\"># Build scripts based on bash language and to avoid any errors it \r\n# would be better to use bash shell. Today there are many shells \r\n# which can be set up on your computer like zsh, csh. To be sure\r\n# that we are in bash shell just run it.\r\n$ bash\r\n\r\n# Create directory in user's folder with name 'aosp'\r\n$ mkdir ~\/aosp\r\n\r\n# Move to created directory\r\n$ cd  ~\/aosp\r\n\r\n# Build process uses a big number of file descriptors, especially if\r\n# you run your build with several threads. To handle this you should\r\n# increase allowed number of simultaneous file descriptors. Set this \r\n# limit to 1024.\r\n\r\n# This will be enough for our build.\r\n# In general it would be better to add the following line to\r\n# ~\/.bash_profile file:\r\n$ ulimit -S -n 1024<\/pre>\n<h3>4. Configure build environment<\/h3>\n<p>Before we start any work we need to prepare our environment that depends on our computer OS. For the purpose of this guide we will focus on the environment setup process for Mac OS.<\/p>\n<p><em>If you have a Linux-based OS (Ubuntu, Debian, etc.) you can setup environment using this <a href=\"http:\/\/source.android.com\/source\/initializing.html#setting-up-a-linux-build-environment\">link<\/a>.<\/em><\/p>\n<p>AOSP uses filenames that only differ by case, for example\u00a0<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; border-radius: 0.3em; color: #993300; background-color: #f0f0f0;\">MyFile.java<\/span> to <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; border-radius: 0.3em; color: #993300; background-color: #f0f0f0;\">myfile.java<\/span>. This is why you should have a case-insensitive filesystem, otherwise after checkout you will have only one file, which will definitely cause an error during the compile process.<\/p>\n<p>To prevent such errors, developers used case-sensitive filesystems and such requirements were added into the pre-build environment test process, which failed before the build process even started. So you could fix everything earlier without waiting a couple of hours just to see the first errors related to the case-insensitivity issue.<\/p>\n<p>By default MacOS runs on a case-insensitive filesystem and to resolve this we will create a disk image with case-sensitive filesystem.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> If you use Linux based OS you do not need to do anything because it has a case-sensitive filesystem by default.<\/p>\n<p>To build AOSP you need about 40Gb of disk space. In our example we will create the image with 50Gb of space to be sure that we will have enough space for future experiments.<\/p>\n<pre class=\"lang:default decode:true \"># Create image with name aosp and size 50Gb. As a result\r\n# you will have the image file in current folder with name\r\n# aosp.dmg.sparceimage.\r\n$ hdiutil create -type SPARSE -fs 'Case-sensitive Journaled HFS+' -size 50g .\/aosp.dmg\r\n\r\n# Mount aosp.dmg to \/Volumes\/aosp point. This means that\r\n# your image (virtual drive) is connected to the MacOS file\r\n# system.\r\n$ hdiutil attach .\/aosp.dmg.sparseimage -mountpoint \/Volumes\/aosp\r\n\r\n# Create working folder. We will use this directory\r\n# to download Android sources.\r\n$ mkdir \/Volumes\/aosp\/android_6.0.1\r\n\r\n# Move to the case-sensitive folder\r\n$ cd \/Volumes\/aosp\/android_6.0.1<\/pre>\n<h3>Check Section:<\/h3>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> In order to check that all operations are executed as we expect, we are going to run periodic checks on previous commands so to be sure that we are safe to continue.<\/p>\n<pre class=\"lang:default decode:true\"># Type next command in console\r\n$ pwd\r\n\r\n# The right result is shown below. If you have an error or wrong\r\n# result you need to check create image steps.\r\n\/Volumes\/aosp\/android_6.0.1<\/pre>\n<p>When we are building Android in Mac OS, the build process uses tools and libraries from MacOS SDK. To get MacOS SDK you will need to install XCode from the <a href=\"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?ls=1&amp;mt=12\">Apple site<\/a>. You need to have an Apple ID to download it.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> If you use Linux based OS you do not need to install XCode; you should install other tools and libraries. Check them on this <a href=\"http:\/\/source.android.com\/source\/initializing.html#setting-up-a-linux-build-environment\">site<\/a>.<\/p>\n<p>After that, you need to link your folder, because Android 6 was created with an old version of XCode where it extracts MacOS SDK into folder <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">\/Developer\/SDKs<\/span>.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> Another option is to install an older version of XCode and use xcode-select tool to switch its toolkit. Find out more about this tool on <a href=\"https:\/\/developer.apple.com\/library\/ios\/technotes\/tn2339\/_index.html\">page<\/a>.<\/p>\n<p>The new version of XCode has another location of MacOS SDK, and to prevent potential search errors, we will create a virtual folder which will be linked to the MacOS SDK location.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> You do not need to run commands below if you are building Android N. It already has right path to the MacOS SDK.<\/p>\n<pre class=\"lang:default decode:true\"># Create folder. We should have created root folder and only after\r\n# that we will create folder with symbolic link.\r\n$ sudo mkdir \/Developer\/SDKs\r\n\r\n# Create symbol link to the MacOS sdk folder from xCode\r\n$ sudo ln -s \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.11.sdk\/ \/Developer\/SDKs\/MacOSX10.6.sdk<\/pre>\n<h3>Check Section:<\/h3>\n<pre class=\"lang:default decode:true\"># Type next command in console\r\n$ ls -a -\/Developer\/SDKs\/MacOSX10.6.sdk\r\n\r\n# The right result is shown below. If you have an error or wrong\r\n# result you need to check 'create link' steps.\r\nSDKSettings.plist\r\nSystem\r\nusr<\/pre>\n<p>Android uses Java as a high-level language, and to compile java classes we need to have installed Java SDK. Android 6.0.1 requires JDK version 1.7, which you can download and install from the <a href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/java-archive-downloads-javase7-521261.html\">Oracle site<\/a>.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> If you want to build Android N you should install JDK version 1.8 from the <a href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/java-archive-downloads-javase7-521261.html\">Oracle site<\/a>.<\/p>\n<h3>Check Section:<\/h3>\n<p>After you\u2019ve installed Java, let\u2019s check your environment:<\/p>\n<pre class=\"lang:default decode:true\"># Type next command in console\r\n$ java -version\r\n\r\n# The right result looks like \"1.7.x_yy\". The important part is \"1.7\".\r\n# If you have an error or wrong version number, you need to check your\r\n# installation flow.\r\njava version \"1.7.0_71\"\r\nJava(TM) SE Runtime Environment (build 1.7.0_71-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)<\/pre>\n<p>The next step is to install tools (gmake, libsdl, git, gnupg) which are used by the Android build process. To simplify this step we will use the package manager <a href=\"https:\/\/www.macports.org\/\">MacPorts<\/a>. You can install tools manually or use <a href=\"http:\/\/brew.sh\/\">brew<\/a>, but it\u2019s easier to do this with the MacPorts tool.<\/p>\n<p>Install MacPorts from <a href=\"http:\/\/www.macports.org\/install.php\">macports.org<\/a> and run command below.<\/p>\n<pre class=\"lang:default decode:true\"># Install make, git, and GPG packages using MacPorts\r\n$ POSIXLY_CORRECT=1 sudo port install gmake libsdl git gnupg<\/pre>\n<h3>Check Section:<\/h3>\n<pre class=\"lang:default decode:true\"># Type next commands in console\r\n$ gmake --version\r\nGNU Make 4.1\r\nBuilt for x86_64-apple-darwin14.0.0\r\n\r\n$ git --version\r\ngit version 2.5.0<\/pre>\n<h3>5. Install \u2018repo\u2019 tool<\/h3>\n<p>AOSP contains a number of git repositories, each of which deliver some functionality for firmware.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest.png\"><img loading=\"lazy\" class=\"wp-image-13558\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest.png\" alt=\"Example of AOSP Manifest\" width=\"740\" height=\"479\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest.png 2172w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-300x194.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-768x497.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-1024x663.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-600x388.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-450x291.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Example-of-AOSP-Manifest-1000x647.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>It is hard to <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">checkout\/pull\/push<\/span> each repository separately and we need a tool to control all of these repositories as one. That is why \u2018repo\u2019 tool was created.<\/p>\n<p>Repo is a repository management tool built on top of Git. It automates parts of the Android development workflow. It doesn\u2019t replace Git, it only makes it easier to work with multiple <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">git<\/span> repositories. The <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">repo<\/span> command is an executable Python script and you can put it anywhere in your path.<\/p>\n<p>If you already have installed <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">repo<\/span> you can skip this step.<\/p>\n<pre class=\"lang:default decode:true\"># Create bin directory in home location.\r\n# We will download repo in this directory.\r\n$ mkdir ~\/bin\r\n\r\n# Add bin to the class path. In general it\r\n# would be better to add the following line to ~\/.bash_profile\r\n$ PATH=~\/bin:$PATH\r\n\r\n# Download repo.\r\n$ curl https:\/\/storage.googleapis.com\/git-repo-downloads\/repo &gt; ~\/bin\/repo\r\n\r\n# Allow execute rights for repo\r\n$ chmod a+x ~\/bin\/repo<\/pre>\n<h3>Check Section:<\/h3>\n<pre class=\"lang:default decode:true\"># Type next commands in console\r\n$ repo --version\r\n\r\n# The right result is shown below. There are no strict requirements\r\n# for the repo version. You don\u2019t need to worry about the sample\r\n# version. If you have an error, you need to check repo installation\r\n# steps.\r\nrepo version v1.12.33<\/pre>\n<p class=\"upgrades\"><strong>NOTICE:<\/strong> The Android build process is rather time-consuming, \u00a0but if you plan to do it more than a few times, it would be better to follow the optimization tips to decrease build time. You can find some helpful tips by following this <a href=\"http:\/\/source.android.com\/source\/initializing.html#optimizing-a-build-environment\">link<\/a>.<\/p>\n<h3>6. Download Android sources.<\/h3>\n<p>As we decided above, we want to build Android version 6.0.1, so our next task is to find appropriate sources. The entry point to all available sources is the Android Source Repository <a href=\"https:\/\/android.googlesource.com.\">https:\/\/android.googlesource.com.<\/a><\/p>\n<p><img loading=\"lazy\" class=\"wp-image-13560\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository.png\" alt=\"View of Android source repository\" width=\"450\" height=\"401\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository.png 1192w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-300x267.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-768x684.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-1024x912.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-600x535.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-450x401.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-source-repository-1000x891.png 1000w\" sizes=\"(max-width: 450px) 100vw, 450px\" \/><\/p>\n<p>It contains a huge number of projects and it is hard to understand what each of them does, but our goal is to find AOSP. All available versions of the AOSP are located in directory <a href=\"https:\/\/android.googlesource.com\/platform\/manifest\/\">platform\/manifest<\/a>.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository.png\"><img loading=\"lazy\" class=\"wp-image-13561\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository.png\" alt=\"View of Android platform repository\" width=\"740\" height=\"412\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository.png 2090w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-300x167.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-768x428.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-1024x570.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-600x334.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-450x251.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-Android-platform-repository-1000x557.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>This page contains branches with name\u00a0<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">android-xxx_ryy<\/span>, where <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">xxx &#8211; version<\/span> of the Android and yy &#8211; revision version. Let\u2019s click on the &#8216;More&#8217; link and find <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">android-6.0.1*<\/span><\/p>\n<p><img loading=\"lazy\" class=\"wp-image-13602 size-full\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Partial-view-of-Android-AOSP-release-branches-2.png\" width=\"695\" height=\"400\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Partial-view-of-Android-AOSP-release-branches-2.png 695w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Partial-view-of-Android-AOSP-release-branches-2-300x173.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Partial-view-of-Android-AOSP-release-branches-2-600x345.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Partial-view-of-Android-AOSP-release-branches-2-450x259.png 450w\" sizes=\"(max-width: 695px) 100vw, 695px\" \/><\/p>\n<p>As you can see, there are many revision numbers for Android 6.0.1, but the best option will be to use the most recent. For us this is revision number 55 and the branch name is <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">android-6.0.1_r55<\/span>.<\/p>\n<p>The next step is simple, but requires a good Internet connection and plenty of patience. Android contains about 20Gb of source files and we need to download all of them.<\/p>\n<pre class=\"lang:default decode:true\"># Initialize repository with branch \u2018android-6.0.1_r55\u2019\r\n$ repo init -u https:\/\/android.googlesource.com\/platform\/manifest -b android-6.0.1_r55\r\n\r\n# Sync your repo with remote repo (Read as download all sources\r\n# to my computer). -c argument defines to sync only current branch.\r\n$ repo sync -c<\/pre>\n<p>After the last command you can get your tea or coffee and take a break for about an hour \ud83d\ude42<\/p>\n<p>When the time comes and sync has ended, you should see a success message. See the screenshot below.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge.png\"><img loading=\"lazy\" class=\"wp-image-13563\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge.png\" alt=\"Android AOSP repo sync - successful console output (click to enlarge)\" width=\"1336\" height=\"1096\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge.png 1336w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-300x246.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-768x630.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-1024x840.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-600x492.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-450x369.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-repo-sync-successful-console-output-click-to-enlarge-1000x820.png 1000w\" sizes=\"(max-width: 1336px) 100vw, 1336px\" \/><\/a><\/p>\n<h3>7.\u00a0Download and install device drivers.<\/h3>\n<p>AOSP contains sources which can be run on different devices and to do this on a concrete device, you need additional hardware-related proprietary libraries. They are not open-source and you can use them only in accordance with the licensing policy.<\/p>\n<p>Each manufacturer decides whether they want to share such binaries for other developers to use or not. It\u2019s usually not. These libraries also heavily depend on Android version. It means that you should find libraries for the concrete version of Android which you want to build.<\/p>\n<p>For example, now we are building Android version 6.0.1 and you should find libraries for your device with <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">version 6.0.1.<\/span> As we build AOSP for Nexus 7 we will use <a href=\"https:\/\/developers.google.com\/android\/nexus\/drivers#flommb29q\">Google\u2019s Nexus driver page<\/a>.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1.png\"><img loading=\"lazy\" class=\"wp-image-13603\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1.png\" width=\"740\" height=\"201\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1.png 1738w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-300x82.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-768x209.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-1024x279.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-600x163.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-450x122.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Nexus-7-drivers-list-1-1000x272.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<pre class=\"lang:default decode:true\"># Download and extract Asus components - Audio, Sensors\r\n$ curl https:\/\/dl.google.com\/dl\/android\/aosp\/asus-flo-mob30p-cd589457.tgz | tar -xvzf - ; bash .\/extract-asus-flo.sh\r\n\r\n# Download and extract Broadcom NFC component\r\n$ curl https:\/\/dl.google.com\/dl\/android\/aosp\/broadcom-flo-mob30p-bbb4a19a.tgz | tar -xvzf - ; bash .\/extract-broadcom-flo.sh\r\n\r\n# Download and extract Qualcomm components - Graphics,\r\n# Camera, GPS, Wi-Fi, Bluetooth, Sensors, Media, DRM, DSP, USB\r\n$ curl https:\/\/dl.google.com\/dl\/android\/aosp\/qcom-flo-mob30p-5a8d363a.tgz | tar -xvzf - ; bash .\/extract-qcom-flo.sh<\/pre>\n<h3>Check Section:<\/h3>\n<pre class=\"lang:default decode:true\"># Type next commands in console\r\n$ ls -a vendor\r\n\r\n# The right result is shown below. If you do not see\r\n# list folders then you need to reinstall drivers.\r\nasus\r\nbroadcom\r\nqcom<\/pre>\n<h3>8. Build AOSP.<\/h3>\n<p>Android 6.0.1 was developed in a time before El Capitan, so we should configure a build to allow it to run on El Capitan. To do this we should add MacOS sdk versions in a config file.<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> If you use Linux based OS you can skip this and move to the next section.<\/p>\n<pre class=\"lang:default decode:true\"># Open mac_version config file in text editor\r\n$ open -e build\/core\/combo\/mac_version.mk<\/pre>\n<p>Find variable <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">mac_sdk_versions_supported<\/span>\u00a0and add to the end <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">10.9 10.10 10.11<\/span>. This means that we allow build process execution with MacOS SDK version 10.(9-11)<\/p>\n<p class=\"upgrades\"><strong>NOTE:<\/strong> In general, editing files under version control is not a good idea. In production it would be better to override variable instead of changing config file.<\/p>\n<p>Before we start our build, let\u2019s check what we have done to make sure we haven\u2019t \u00a0forgotten anything:<\/p>\n<ul>\n<li>switch to bash;<\/li>\n<li>set up number of simultaneous file descriptors to 1024;<\/li>\n<li>create disk image with case-insensitive filesystem;<\/li>\n<li>install XCode with MacOS sdk;<\/li>\n<li>install Java version 1.7;<\/li>\n<li>install gmake, libsdl, git, gnupg;<\/li>\n<li>install repo tool;<\/li>\n<li>download Android 6.0.1 sources;<\/li>\n<li>download and install device drivers for Nexus 7;<\/li>\n<li>add MacOS sdk versions in a config file.<\/li>\n<\/ul>\n<p>The following is the most important part of our quest. A build process will take about 3-5 hours.<\/p>\n<pre class=\"lang:default decode:true\"># Initialize the environment with the envsetup.sh script.\r\n# It will add additional commands in your path\r\n$ source build\/envsetup.sh\r\n\r\n# Chose target. flo - this means target for Nexus 7,\r\n# userdebug - config with root access and debuggability\r\n$ lunch aosp_flo-userdebug\r\n\r\n# Build command. -jN argument define parallel tasks which\r\n# make can handle, and it's common to use a number of tasks N\r\n# that are equal to the number of hardware threads on the computer\r\n# being used for the build.\r\n$ make -j8<\/pre>\n<p>A successful result should show in the console text: <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">make completed successfully<\/span>.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge.png\"><img loading=\"lazy\" class=\"wp-image-13565 size-full\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge.png\" alt=\"Android AOSP Build - successful console output (click to enlarge)\" width=\"2194\" height=\"876\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge.png 2194w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-300x120.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-768x307.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-1024x409.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-600x240.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-450x180.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Android-AOSP-Build-successful-console-output-click-to-enlarge-1000x399.png 1000w\" sizes=\"(max-width: 2194px) 100vw, 2194px\" \/><\/a><\/p>\n<h3><strong>Congratulations!!!<\/strong><\/h3>\n<p>The result of this \u00a0long build will be in the folder <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">\/Volumes\/aosp\/android_6.0.1\/out\/target\/product\/flo\/<\/span>\u00a0and it should looks something like this:<\/p>\n<p><img loading=\"lazy\" class=\"wp-image-13566\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory.png\" alt=\"View of files list in build directory\" width=\"339\" height=\"521\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory.png 654w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory-195x300.png 195w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory-600x923.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory-293x450.png 293w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/View-of-files-list-in-build-directory-650x1000.png 650w\" sizes=\"(max-width: 339px) 100vw, 339px\" \/><\/p>\n<p>So you can go there and explore the result files. The important files for us are those with an <span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em; color: #993300;\">*.img<\/span> extension. These are images of Android firmware which are used when we are flashing a device.<\/p>\n<h3>Check Section:<\/h3>\n<pre class=\"lang:default decode:true\"># Run command to check created images\r\n$ ls -a out\/target\/product\/flo\/ | grep .img\r\n\r\n# The right result is shown below. If you do not see a\r\n# list of *.img files, then something has gone wrong.\r\n# Please check all steps and rebuild AOSP.\r\nboot.img\r\ncache.img\r\nramdisk-recovery.img\r\nramdisk.img\r\nrecovery.img\r\nsystem.img\r\nuserdata.img<\/pre>\n<h3>9. Run own AOSP<\/h3>\n<p>Now we have images of our firmware and to check it we need to flash device. Connect device to the computer through a USB cable and run next commands.<\/p>\n<pre class=\"lang:default decode:true\"># Reboot device in boot mode. Wait until boot mode has appeared.\r\n$ adb reboot bootloader<\/pre>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1.jpg\"><img loading=\"lazy\" class=\"wp-image-13664\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1.jpg\" width=\"345\" height=\"613\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1.jpg 1440w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-169x300.jpg 169w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-768x1365.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-576x1024.jpg 576w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-600x1067.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-253x450.jpg 253w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Fastboot-view-1-563x1000.jpg 563w\" sizes=\"(max-width: 345px) 100vw, 345px\" \/><\/a><\/p>\n<pre class=\"lang:default decode:true\"># Unlock device. This command allows you to flash it. Use volume\r\n# buttons to select option and power button to apply option.\r\n$ fastboot oem unlock\r\n\r\n# Flash device with new images. -w option wipes the \/data \r\n# partition on the device.\r\n$ fastboot flashall -w<\/pre>\n<p>After the last command your device will reboot and after 1-2 minutes, when new firmware is initialized, you will see your own firmware.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2.png\"><img loading=\"lazy\" class=\"wp-image-13604\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2.png\" width=\"740\" height=\"603\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2.png 2584w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-300x244.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-768x626.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-1024x834.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-600x489.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-450x367.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/nexus7-2-1000x815.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<h2>What\u2019s next?<\/h2>\n<p>We have done a great job! After several hours we now know how to prepare build environment, choose AOSP version, build own firmware and install it on the device. As a result, we have installed firmware which is made by hand and we are ready for the next set of challenges.<\/p>\n<p>In the next part we will look how we can test our firmware to be sure that our software (AOSP) works correctly with hardware and passes the Android Compatibility Tests.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Before we go deep into the technical details of building Android from AOSP and installing it on actual hardware, let\u2019s look at a true not very true scenario.<\/p>\n","protected":false},"author":63,"featured_media":13554,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[800],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Learn how to build and run Android from AOSP source code in our comprehensive step-by-step guide.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Build, Run Android from AOSP Source Code to Nexus 7\" \/>\n<meta property=\"og:description\" content=\"Learn how to build and run Android from AOSP source code in our comprehensive step-by-step guide.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2016-08-29T15:00:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-09-25T20:26:13+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Build-and-Run-Android-from-Source-Code-to-a-Nexus-7.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1400\" \/>\n\t<meta property=\"og:image:height\" content=\"1000\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Build-and-Run-Android-from-Source-Code-to-a-Nexus-7.jpg\",\"width\":1400,\"height\":1000},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/\",\"name\":\"Build, Run Android from AOSP Source Code to Nexus 7\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/#primaryimage\"},\"datePublished\":\"2016-08-29T15:00:52+00:00\",\"dateModified\":\"2019-09-25T20:26:13+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Learn how to build and run Android from AOSP source code in our comprehensive step-by-step guide.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/build-and-run-android-from-aosp-source-code-to-a-nexus-7\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13549"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=13549"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13549\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/13554"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=13549"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=13549"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=13549"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}