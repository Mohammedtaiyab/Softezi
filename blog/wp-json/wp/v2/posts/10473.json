{"id":10473,"date":"2015-09-16T17:01:32","date_gmt":"2015-09-16T14:01:32","guid":{"rendered":"https:\/\/stanfy.com\/?p=10473"},"modified":"2019-10-28T18:26:28","modified_gmt":"2019-10-28T15:26:28","slug":"madcode-meetup-pair-programming","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/","title":{"rendered":"MadCode Meetup: Pair Programming. Great Tool on a Rocky Path"},"content":{"rendered":"<p>Our company is a mobile application developer and throughout our work process we are continuously experimenting with new approaches and methodologies that would speed up the development process while maintaining quality results.<\/p>\n<p>In this article, I will describe my personal experience of pair programming, how the technique is applied on actual projects at our company, as well as the findings and results we were able to reach with this technique at Stanfy.<\/p>\n<figure id=\"attachment_10488\" aria-describedby=\"caption-attachment-10488\" style=\"width: 766px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"wp-image-10488 size-full\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/PP.jpg\" alt=\"Pair programming at Stanfy\" width=\"766\" height=\"575\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP.jpg 766w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP-300x225.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP-600x450.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP-450x338.jpg 450w\" sizes=\"(max-width: 766px) 100vw, 766px\" \/><figcaption id=\"caption-attachment-10488\" class=\"wp-caption-text\">Pair programming, Stanfy<\/figcaption><\/figure>\n<p>First, however, I obviously have to provide a <em>disclaimer<\/em>. Everything I talk about below is based solely on my personal impressions and findings about pair programming. Even the programmer working in a pair with you may have impressions that are completely different from yours.<\/p>\n<p>The name of the methodology speaks for itself. To give an overview, it is necessary to provide a basic definition of this approach and the terms that I will use below:<\/p>\n<p><strong>Pair programming<\/strong> is a software development technique in which two programmers work as a pair together on one workstation. One of them writes code while the other monitors the process.<\/p>\n<p>When defining the roles in the article, I will use the <a href=\"http:\/\/guide.agilealliance.org\/guide\/pairing.html\" target=\"_blank\" rel=\"noopener noreferrer\">Agile Alliance<\/a> terminology wherein the one who writes code is the driver and the other one is the observer or navigator.<\/p>\n<p>It is important to adjust the time period for when the two persons can swap roles\u2013as a rule, between 20 minutes and 1 hour. At Stanfy, we have been able to empirically establish that 30 minutes is the optimal duration so that one person does not stay away from the keyboard for a long time and does not disengage.<\/p>\n<p>At the same time, the driver has enough time to complete a minimum new functional code. As the concept of working in a pair is not new in itself, over time patterns of how exactly people can work in pairs have evolved. I will provide the most common ones.<\/p>\n<h4>The Lazy<\/h4>\n<p>It can be said that it is the most classical approach to pair programming. You just pull up a chair and sit next to your colleague.<\/p>\n<p>The advantage of this variant is its speed (no need to set up anything unnecessary). However, a great disadvantage is that it creates an unfamiliar situation for one member of the pair. Indeed when you sit in a pair with somebody, the whole environment\u00a0\u2014\u00a0from the keyboard and layout to hotkeys \u2014 becomes unfamiliar.<\/p>\n<h4>The Classic<\/h4>\n<p>It can be said that the classic is the next level after the Lazy. There\u2019s still just one computer, but the main difference is that there are 2 monitors, 2 keyboards and 2 mice. It should be noted that the computer should not belong to either pair; the workstation should be a separate, \u201cneutral\u201d machine.<\/p>\n<p>This set-up of the work environment offers many advantages: quick swapping of roles, no distractions by personal life matters, universal hotkeys and IDEs for all the team members. The drawback of this pattern is that it is quite costly in terms of allocating a dedicated system that will be solely used as a station for pair programming.<\/p>\n<p>The above variants are more or less classical options. Those that follow are a few variations.<\/p>\n<h4>The Noob<\/h4>\n<p>The Noob does not involve role swapping per say. There are still two persons sitting at the computer, but only one of them writes code. Many sources say that this variant is the best for training, as the navigator can ask questions in the process of writing code and observe what is happening.<\/p>\n<p>Based on our experience, this approach can also be used by a pair of expert programmers. This pattern helps overcome 2 important obstacles in the way of effective performance: unfamiliar environment and wasting time on swapping roles.<\/p>\n<p>Obviously, the main drawback of this pattern is that the navigator is likely to lose interest or lose the driver\u2019s logic in writing code. In such cases, the navigator should stop the driver and enquire until all i\u2019s are dotted.<\/p>\n<h4>The Distracted<\/h4>\n<p>This approach is a Lazy variation where the navigator has his\/her laptop at hand. This extra computer is used to search for information or to clarify certain details of the process. It should be noted that the navigator still has to look at the driver\u2019s monitor for most of the time and watch what is happening there.<\/p>\n<p>A potential advantage is that it boosts productivity, as the driver doesn\u2019t have to divert his attention to google something. He\/she can concentrate solely on writing code and get new information from the navigator.<\/p>\n<p>As with the Noob, the main drawback of this approach is the high possibility for the navigator to get distracted by a Skype message, an email, etc. Compared with the previous approach, the possibility is several times higher here, as there is a personal computer in front of the navigator that could be a constant source of distraction.<\/p>\n<p>Of course, on paper the idea behind the methodology seems ideal. In an ideal world, productivity increases, tasks are written faster, and there are fewer bugs. And it would have been true if machines were writing code. However, as pairs are human, the approach is not all that smooth and ideal. <strong>Therefore, in the present article, I will try to answer the following questions:<\/strong><\/p>\n<ul>\n<li>Is there an ideal situation to work in pair with someone?<\/li>\n<li>At the end of the day, are there any benefits from working in pair? And what are the pitfalls?<\/li>\n<li>How do we, at Stanfy, apply pair programming?<\/li>\n<\/ul>\n<h3><img loading=\"lazy\" class=\"aligncenter wp-image-10555\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/IMG_0409-1024x768.jpg\" alt=\"Pair programming collaboration\" width=\"724\" height=\"543\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-1024x768.jpg 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-300x225.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-768x576.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-600x450.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-450x338.jpg 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/IMG_0409-1000x750.jpg 1000w\" sizes=\"(max-width: 724px) 100vw, 724px\" \/><\/h3>\n<h3>The right time for pair programming<\/h3>\n<p>Is there a right time to work in pair with someone? No, there is no such time; there are no hard and fast rules about the best time for pair programming. However, there are situations where the value of pair work increases significantly. These situations are:<\/p>\n<ul>\n<li>when a new person joins a project<\/li>\n<li>problems with a new functional code, with fixing a bug<\/li>\n<li>demonstrating the efficiency of a new technology\/library\/methodology (RxJava, TDD, etc.)<\/li>\n<li>job interview<\/li>\n<\/ul>\n<h4>A new person joins the project<\/h4>\n<p>As we know from Brooks\u2019 classic work \u201c<a href=\"http:\/\/www.amazon.com\/exec\/obidos\/tg\/detail\/-\/0201835959\/\" target=\"_blank\" rel=\"noopener noreferrer\">The Mythical Man-Month<\/a>\u201d, when working on a large project, a newcomer needs between 3 and 6 months to thoroughly learn all the components and only then his\/her productivity would be at required level.<\/p>\n<p>When a new person joins the project, simple knowledge of language and technology is not enough for faster integration. Working in pair with a newcomer for at least one day will significantly improve his\/her understanding of what is happening in your project. What each component is responsible for? How does the process of publishing and implementing a new functional code work? How do different parts of the system interact with each other? A newcomer would find it quite hard to answer these and many other questions.<\/p>\n<p>Pair programming allows a significant reduction in learning time, as someone who has been working on the project for a long time introduces the newcomer to it. When working on real tasks, questions arise that would have otherwise not popped up if the project was simply introduced in 5 minutes.<\/p>\n<h4>Implementation of the new functional code\/fixing bugs<\/h4>\n<p>Sometimes when developing a new functional code you get lost in your own code. When the number of new lines increases, the task seems completed and yet some faults constantly come up (new bugs relevant to the new code).\u00a0If you remember the value graph of the bug based on the time the bug was detected, it is quite reasonable to ask someone to evaluate your solution before the PR stage.<\/p>\n<figure id=\"attachment_10491\" aria-describedby=\"caption-attachment-10491\" style=\"width: 284px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/costs_time_small.jpg\"><img loading=\"lazy\" class=\"wp-image-10491 size-full\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/costs_time_small.jpg\" alt=\"(image: http:\/\/www.practical-programming.org)\" width=\"284\" height=\"265\" \/><\/a><figcaption id=\"caption-attachment-10491\" class=\"wp-caption-text\">(image: http:\/\/www.practical-programming.org)<\/figcaption><\/figure>\n<p>You might get some \u2018WTF?!\u2019 or some other comments and advice on how you should have done it. However, it is sometimes difficult to understand someone else\u2019s idea, especially if you already have your \u2018almost working\u2019 code. On the other hand, it is also difficult sometimes to give advice or offer an alternative solution without understanding the problem as a whole and being away from the actual code. In such situations, pair programming allows for one person to demonstrate his\/her idea and the other person to better understand the logic of the new implementation.<\/p>\n<p>From our experience, even one day of pair work is enough to give a nudge to complete the task. You can ask one of your colleagues the night before or at a stand-up to sit with you in pair for half a day or a day so as to give fresh impetus to solving the problem. No one refuses and everybody finds the time to help a colleague, as we all understand that at the end of the day we are a team working together for the development of a shared product.<\/p>\n<h4>Demonstration of a new technology\/library<\/h4>\n<p>Today, new libraries\/frameworks\/approaches for programming are constantly being developed, and sometimes it is difficult to keep abreast and follow all these new developments. Therefore, a good time to work with another programmer to write code is when a member of the team has learned a new technology\/library. Thus, by working in pair, the acquired skills can be passed on much faster. This is very efficient when you need to tell a person about the internal libraries used, how to use them correctly and why they\u2019re effective.<\/p>\n<h4>As a hiring step<\/h4>\n<p>In Stanfy, we actively use a day of pair programming as one of the steps for hiring new programmers. A candidate works in turn with all the team members for a day. This way we are able, on the one hand, to evaluate the applicant\u2019s technical skills, and on the other, the applicant gets a chance to get to know what he\/she will have to work with, the technologies used and the level of his\/her potential colleagues.<\/p>\n<h3>Advantages of pair work<\/h3>\n<p>Now, let\u2019s talk about the advantages. There are advantages to pair work despite the fact that they\u2019re not that evident at first sight. So, for me the main advantages of writing code in pair include the following:<\/p>\n<ul>\n<li>better code quality at completion of the task<\/li>\n<li>better understanding of the project and the changes to it<\/li>\n<li>better understanding of the code of the people who work with you on the project<\/li>\n<\/ul>\n<h4>Code quality<\/h4>\n<p>One of the main advantages, however obvious it may sound, is the quality of the code that is obtained at completion of the task. For, working in pair, one writes code while the other has nothing to do but to be a non-stop reviewer.<\/p>\n<p>If a code doesn\u2019t appear clear for the navigator, the more difficult its readability will be for someone who would have to deal with it in the future. This is the first cue to make comments\/perform refactoring. When writing code, sometimes you can forget for months to apply the code style, left TODO comments, debug logs, etc. Experience shows that at least one of the pair will remember about all these things.<\/p>\n<h4>Deeper project knowledge<\/h4>\n<p>Pair programming not only allows the fixing of potential bugs but also increases the team\u2019s overall familiarity with the latest changes to the project. Let\u2019s say that two programmers have completed their respective tasks. Each of the tasks is \u201cuncharted territory\u201d for the other; the most each programmer can do is to look at the final code review. And even then 2 problems remain: the team might not use code PR and review, and even if they do, the final code is not always clear and readable.<\/p>\n<p>If the 2 tasks are written by the same two programmers, working in pair, both would understand the new code and functional code. Thus, a significantly deeper knowledge of the different components of the system that the team works with can be achieved.<\/p>\n<h4>Helps understand a team member<\/h4>\n<p>When someone else is at the keyboard and you are just observing, you can better understand the code that the driver is writing if you watch how it is being written. This helps better understand what guides the person when making this or that decision. Pair work teaches the pair that his\/her idea is not necessarily right and is subject to change, and the idea that he\/she will have to apply will not be necessarily called the way he\/she calls it.<\/p>\n<h3>Disadvantages of pair work<\/h3>\n<p>Now, let\u2019s go on to talk about the disadvantages. The word \u201cdisadvantages\u201d is not quite appropriate here, rather, it is better to refer to \u201cobstacles\u201d in the way of productive performance. To understand what the main obstacle is, it is worth noting that such work requires the time of 2 programmers and that this time is most efficiently spent writing code. Accordingly, anything that hinders writing code or discussing the right solution (the solution itself, not minor details of implementation) is considered an obstacle. In particular, these include:<\/p>\n<ul>\n<li>personal life (working hours, lunch break, chats with cats in Skype, etc.)<\/li>\n<li>work environment (IDE, shortcuts, familiarity with keyboard layout, etc.)<\/li>\n<li>discussions of the small details of implementation (name of the variable, some other minor refactoring).<\/li>\n<\/ul>\n<h4>Personal life<\/h4>\n<p>Business emails, messages of funny cats in Skype, different working hours, private life: these are not that terrible individually, but together (as is usually the case) they waste so much time that it is clear right away that pair work is utterly inefficient and a waste of time. This particularly concerns the person who acts as the navigator. When you are not writing code yourself, you can be easily distracted by a new message on your phone. The driver takes note of such behaviour and allows himself the same after swapping roles. Such things reduce the productivity of the team as a whole.<\/p>\n<p>As a result, in order to achieve productivity, first and foremost, the factors mentioned above should be minimised. If you know that you will be working in pair the next day, agree on the working hours. This would include arrival time, lunch break, etc. You would also need to agree on occasional breaks to check your Facebook accounts. A break every 2-3 hours will give each of you time for personal matters.<\/p>\n<h4>Tech stuff<\/h4>\n<p>Getting used to the new work environment (when the accustomed hotkeys do not work, or the keyboard layout is unfamiliar) can take too much time and bring on frustration, and thoughts like \u201cWhy do I need this pair work?\u201d Therefore, you need to get rid of the cause for discomfort related to the unfamiliar workplace. The ideal option for the work environment is a 3rd \u201cneutral\u201d computer that, on the one hand, will be minimally personalised, and on the other, will allow the two programmers to get used to it with continued use. If a team applies pair work, a good personal practice would be to use standard settings for hotkeys and keep their personalised customisation to a minimum. This way, if you have to use another machine, you will not get irritated that the shortcuts are not working the way you want them to work.<\/p>\n<h4>Development speed decreases frequently<\/h4>\n<p>Development speed decreases. This is a widely known problem and brought up every time someone hears about pair programming. However, the main challenge of a slower pace is not that one task takes the time of 2 programmers.<\/p>\n<p>The discussion of minor details may lead to disputes and this is a very undesirable, as it not only slows down the work on a task but also harms people\u2019s relationships. In fact, this might be the biggest danger among all the disadvantages listed above, as it does not merely slow down the work but also after several such minor conflicts, the relationships between colleagues would break down and a kind of \u201canti-teambuilding\u201d atmosphere would settle.<\/p>\n<p>There is no 3rd party and no one can arbitrate in your dispute, so a good rule of thumb is to always remember that the ultimate goal is a completed feature with a well-tested code. Keeping this in mind, many a discussion can be avoided without even going into it. Of course, if you definitely know that a certain code will lead to memory leak, you should not keep silent. But remember that \u201cbecause I think so\u201d in not really a valid argument.<\/p>\n<p>At Stanfy, pair work sessions may be limited to a day, a week or a specific feature when people sit together until they completed a certain functional code. There were situations when one person only wrote the code during a day, and yet the navigator was constantly engaged in discussing of implementation and giving useful advice on code change (Noob pattern). And, given the obstacles relating to the different work environments of various approaches, this appears to be not too bad of an idea for efficient work.<\/p>\n<h3>Final thoughts<\/h3>\n<p>Unfortunately, there is no silver bullet, neither is there an ideal situation when pair work is a requirement. Therefore, this matter requires flexibility. There are many articles on pair programing available on the Internet; largely they list similar advantages and disadvantages of pair programming. The main thing to remember is that pair programming, like Agile methodology, is most beneficial when it is adapted as far as possible to your work environment. One should always remember that this approach is just a tool that helps create a quality software product. You don\u2019t have to use it all the time, but it would be reasonable to keep it in mind.<\/p>\n<p><em>If you have any questions about<strong> app development, <a href=\"https:\/\/www.intellectsoft.net\/contacts\" target=\"_blank\" rel=\"noopener noreferrer\">get in touch<\/a> <\/strong>with us. We would love to hear from you!<\/em><\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Our company is a mobile application developer and throughout our work process we are continuously experimenting with new approaches and methodologies that would speed up&#8230;<\/p>\n","protected":false},"author":63,"featured_media":14610,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[800],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Learn from the personal experience of our developers and see how pair programming works on the projects at our company. What are the pair programming tools?\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Pair Programming: Techniques Applied on Projects\" \/>\n<meta property=\"og:description\" content=\"Learn from the personal experience of our developers and see how pair programming works on the projects at our company. What are the pair programming tools?\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2015-09-16T14:01:32+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-10-28T15:26:28+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"766\" \/>\n\t<meta property=\"og:image:height\" content=\"575\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/PP.jpg\",\"width\":766,\"height\":575},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/\",\"name\":\"Pair Programming: Techniques Applied on Projects\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/#primaryimage\"},\"datePublished\":\"2015-09-16T14:01:32+00:00\",\"dateModified\":\"2019-10-28T15:26:28+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Learn from the personal experience of our developers and see how pair programming works on the projects at our company. What are the pair programming tools?\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/madcode-meetup-pair-programming\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10473"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=10473"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10473\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/14610"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=10473"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=10473"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=10473"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}