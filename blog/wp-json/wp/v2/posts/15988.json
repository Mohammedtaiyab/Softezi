{"id":15988,"date":"2018-12-10T19:01:48","date_gmt":"2018-12-10T16:01:48","guid":{"rendered":"https:\/\/www.intellectsoft.net\/blog\/?p=15988"},"modified":"2020-08-27T01:15:18","modified_gmt":"2020-08-26T22:15:18","slug":"agile-metrics","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/","title":{"rendered":"15+ Useful Agile Metrics in Scrum &#038; Kanban: Measure Quality, Productivity &#038; Performance"},"content":{"rendered":"<p><span style=\"font-weight: 400;\">Agile metrics are a crucial part of an agile software development process. They help software teams monitor productivity across workflow stages, access software quality, as well as introduce more clarity to the development process. Metrics in agile software development can also help a scrum\/kanban master keep track of their teams\u2019 well-being. \u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">For our list, we have chosen scrum and kanban metrics that can be useful to both in-house agile teams and <a href=\"https:\/\/www.intellectsoft.net\/services\/dedicated-development-team\" target=\"_blank\" rel=\"noopener noreferrer\">agile dedicated teams<\/a>\u00a0 in measuring software quality, productivity, performance\/well-being, as well as general project metrics. We will also take a look at lean kanban metrics and how to ensure your product ends up with clean code in two separate sections.\u00a0\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Let\u2019s start.<\/span><\/p>\n<h2><b>Types of Agile Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">There are three main types of agile metrics:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><b>Scrum metrics<\/b><span style=\"font-weight: 400;\">. The most commonly used metrics in software development.<\/span><\/li>\n<li style=\"font-weight: 400;\"><b>Kanban metrics<\/b><span style=\"font-weight: 400;\">. An agile software development framework similar to the scrum methodology.<\/span><\/li>\n<li style=\"font-weight: 400;\"><b>Lean metrics<\/b><span style=\"font-weight: 400;\">. Metrics used to streamline the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Lean_manufacturing\">manufacturing<\/a> of physical products, from which both kanban and scrum originate.\u00a0<\/span><\/li>\n<\/ul>\n<h2><b>Agile Quality Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">This group of agile software development metrics will help you assess the quality of your software product and predict whether the target audience will like it. <\/span><\/p>\n<h3><b>Escaped Defects<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Escaped Defects will help you identify the number of bugs in a build or release after in enters production. This metric allows your team to access the quality of your software, although in a rather raw form. This is one of the agile quality metrics you should consider using: bugs on production always pose problems. <\/span><\/p>\n<h3><b>Failed Deployments<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">This metric will help you access the number of deployments to testing and production environments. Failed deployments can shed light on how reliable those environments are and whether a team is building working software at all. Concurrently, you can use the the failed deployments metrics to understand whether a given sprint or release is ready to go to production. As far as quality metrics in agile software development go, failed deployments is incredibly useful. <\/span><\/p>\n<h3><b>Release Net Promoter Score (NPS)<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">NPS measures the reaction of users to a given release. The metric can help teams predict whether users will recommend the software product. Net Promoter Score is measured right before the release. Although one of agile software quality metrics on our list, NPS can also be regarded as a customer satisfaction metric.<\/span><\/p>\n<h2><b>Agile Productivity Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">The following selection of agile development metrics will help you assess your team\u2019s productivity in completing stories, tasks, and bigger bodies of work. The many useful agile productivity metrics will also aid you in predicting the productivity of your team in forthcoming sprints, prevent bottlenecks, and tackle unexpected scope changes.<\/span><\/p>\n<h3><b>Lead Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Lead Time allows for monitoring a story from the point when it enters a backlog to a sprint\u2019s end (or to the moment of release). The lower it is, the more effective your development process is. Lead Time is one of those agile metrics that allows for gaining an overarching perspective on the productivity of your development efforts. <\/span><\/p>\n<h3><b>Cycle Time (Control Chart)<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Part of the previous metric, Cycle Time will help you measure the average time your team needs to fulfill a task. If your team has short cycle times, it means they are highly effective. Concurrently, when your team\u2019s cycle team is consistent, you can better predict how they will work in the future. This metric will also help you to quickly pinpoint the emerging bottlenecks in your agile software development process.<\/span><\/p>\n<h3><b>Sprint Burndown<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Before starting a sprint, a team forecasts how many story points they can complete in its course. <\/span><span style=\"font-weight: 400;\">Sprint Burndown allows a scrum\/kanban master to track the completion of those story points and ensure a team will finish the planned scope of work within the set time frame. <\/span><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-15991\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sprint_Burndown.jpg\" alt=\"Agile Productivity Metrics\" width=\"589\" height=\"348\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sprint_Burndown.jpg 589w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sprint_Burndown-300x177.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Sprint_Burndown-450x266.jpg 450w\" sizes=\"(max-width: 589px) 100vw, 589px\" \/><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><em>Sprint Burndown chart example (Source: Scrum Institute)<\/em><\/span><\/p>\n<p><span style=\"font-weight: 400;\">Sprint Burndown is one of the most effective agile productivity metrics for a few more reasons. First, it allows you to track the progress of a sprint closely and in real time. Second, the metric shows how agile your team really is.<\/span><\/p>\n<h3><b>Epic &amp; Release Burndown<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">These metrics allow teams to track bigger bodies of work than Sprint Burndown can cover. One of the major benefits of Epic Burndown and Release Burndown is that they help to manage the scope creep \u2014 the addition of new requirements after the project scope was already defined. <\/span><span style=\"font-weight: 400;\">These agile metrics will help you ensure your team will not lose in productivity after, for example, the product owner on the client&#8217;s side tasks your team to add a new massive feature.<\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-17517\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-1024x540.png\" alt=\"Epic Burndown \" width=\"1024\" height=\"540\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-1024x540.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-300x158.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-768x405.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-600x316.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-450x237.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian-1000x527.png 1000w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Epic-Burndown-Chart-Atlassian.png 1060w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><em>Epic Burndown chart example (Source: Atlassian)<\/em><\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-17518\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Release-Burndown-Chart-Microsoft.png\" alt=\"Release burndown\" width=\"618\" height=\"340\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Release-Burndown-Chart-Microsoft.png 618w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Release-Burndown-Chart-Microsoft-300x165.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Release-Burndown-Chart-Microsoft-600x330.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Release-Burndown-Chart-Microsoft-450x248.png 450w\" sizes=\"(max-width: 618px) 100vw, 618px\" \/><\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><em>Release Burndown chart example (Source: Atlassian)<\/em><\/span><\/p>\n<h3><b>Velocity<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Velocity is one of the most essential metrics in agile software development, allowing you to assess the average quantity of completed story points over several past sprints. You can use the metric to foresee how effective your team will be in the forthcoming sprints, making it a rather powerful planning tool.<\/span><\/p>\n<p><b>The benefits of Velocity also include:<\/b><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Easy to measure<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Shows a clear result right away<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Lower Velocity may signal about emerging sprint inefficiencies<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">As many factors can affect productivity, it is crucial to follow how your team\u2019s Velocity changes over time.<\/span><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-15992\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/AgileVelocityReport.png\" alt=\"Agile Quality Metrics\" width=\"564\" height=\"396\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/AgileVelocityReport.png 564w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/AgileVelocityReport-300x211.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/AgileVelocityReport-450x316.png 450w\" sizes=\"(max-width: 564px) 100vw, 564px\" \/><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><em>Velocity chart example (Source: Atlassian)<\/em><\/span><\/p>\n<h2><b>Agile Project Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">A handy addition to the metrics above, agile software project metrics will provide actionable information on your development processes, helping to your team to avoid issues both big and small.<\/span><\/p>\n<h3><b>Cumulative Flow<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Cumulative Flow is arguably one of the most powerful agile project metrics for kanban. It gives you a bird\u2019s-eye view on the statuses of your tasks in a sprint, release, and across software teams. With this metric, you will be able to view all statuses for all workflow stages and immediately identify bottlenecks &#8212; all in a single diagram.<\/span><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-15995\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Cumulative-Flow-Diagram-1.png\" alt=\"Agile Project Metrics\" width=\"650\" height=\"410\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Cumulative-Flow-Diagram-1.png 650w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Cumulative-Flow-Diagram-1-300x189.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Cumulative-Flow-Diagram-1-600x378.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Cumulative-Flow-Diagram-1-450x284.png 450w\" sizes=\"(max-width: 650px) 100vw, 650px\" \/><\/p>\n<p style=\"text-align: center;\"><span style=\"font-weight: 400;\"><em>Cumulative Flow Diagram example (Source: Kanban Tool)<\/em><\/span><\/p>\n<h3><b>Code Coverage<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Code Coverage will help you calculate how much of your product&#8217;s code is covered by unit tests, presenting it in a raw visualization. It can be measured by the quantity of methods, conditions, statements, and branches that comprise your unit testing suite. You can also run Code Coverage automatically as part of every build. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">While Code Coverage is one of the most effective agile metrics, it does not measure the input of other types of testing. So, if your\u00a0 numbers are high, it doesn&#8217;t necessarily mean your product has solid code. Still, the metric will give you a good perspective on the quality of your product. \u00a0<\/span><\/p>\n<h2><b>Health Metrics for Agile Teams\/Agile Performance Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">While most agile software development metrics are aimed at assessing software quality and team productivity at different stages and from different perspectives, monitoring the well-being of your team is as crucial. <\/span><\/p>\n<h3><b>Happiness<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">There is no single, tried-and-true way to measure happiness in a software development team. Still, a common solution is to ask every team member to rate current happiness on a scale from 1 to 5. According to organizational psychologist Christiaan Verwijs, this can be followed by several questions, for example:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">How happy are you with your company? (<em>on a scale from 1 to 5<\/em>)<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What feels best right now? (<\/span><i><span style=\"font-weight: 400;\">open question<\/span><\/i><span style=\"font-weight: 400;\">)<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What feels worst right now? (<\/span><i><span style=\"font-weight: 400;\">open question<\/span><\/i><span style=\"font-weight: 400;\">)<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">What would increase your happiness? (<\/span><i><span style=\"font-weight: 400;\">open question<\/span><\/i><span style=\"font-weight: 400;\">)<\/span><\/li>\n<\/ul>\n<h3><b>Team Morale<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Still, Verwijs argues that measuring morale in an agile software development team is more effective.\u00a0 The Happiness metric can be unreliable due to its subjectivity and measuring it entails many nuances that don&#8217;t help in solving the problem. Team Morale, on the other hand, offers a more subtle approach that accounts for mood swings.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">So, Verwijs <\/span><span style=\"font-weight: 400;\">suggests to measure Team Morale by asking team members to rate the following statements on the scale from 1 to 5 (or from 1 to 7, for more nuanced results): <\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">I feel fit and strong in my team<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">I am proud of the work that I do for my team<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">I am enthusiastic about the work that I do for my team<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">I find the work that I do for my team of meaning and purpose<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">The questions are more specific, allowing you to better access the well-being of your team members. <\/span><\/p>\n<p><span style=\"font-weight: 400;\">Still, approaching and accessing such aspects is a complicated matter. It is up to a scrum\/kanban master to choose the one that fits best (they can also propose a different approach altogether). If you doubt whether you need to use these metrics for agile teams, try starting small <\/span><span style=\"font-weight: 400;\">by measuring happiness monthly, and see how it goes. Agile team performance metrics might just be what you need to improve your development process.\u00a0\u00a0<\/span><\/p>\n<h2><b>Core Lean &amp; Kanban Metrics<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Now, let\u2019s explore the key metrics in lean and kanban methodologies. These metrics are often common to both software development and goods manufacturing.\u00a0<\/span><\/p>\n<h3><b>Story Lead Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Story Lead Time (SLT) is the analogue of the Lead Time metric used in agile software development. SLT helps you measure how much time has passed from the moment a user story entered a backlog to the point when it is completed. That includes the time the story was simply sitting in your backlog. The main aim of SLT is to help teams assess and reduce the speed of a value chain.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Not only that, but the metric may also prompt your team to gain speed if your value chain has slow cycles: the amount of sitting is added to the overall SLT. If a story had been sitting in a backlog for two months and then was completed in two weeks, the SLT will be two and a half months.\u00a0<\/span><\/p>\n<h3><b>Story Cycle Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Story Cycle Time (SCT) is a metric that is part of Story Lead Time. It covers only the time a story is in progress, helping to measure and reduce the hours spent on it. Story Cycle Time is always shorter than Story Lead Time and takes up half of a sprint or less. If a story goes from one phase to another, for example from development to testing, you should count in that time as well.\u00a0<\/span><\/p>\n<h3><b>Feature Lead Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">User stories often form features, and measuring how much time does it take to create and release a feature is also important. This is the aim of Feature Lead Time (FLT), the analogue of Story Lead Time for features. Like the latter, FLT covers the time between the moment a feature has entered a backlog and the point when it is released to customers. The countdown begins when the first user story for a feature enters a backlog.<\/span><\/p>\n<h3><b>Feature Cycle Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">This is the equivalent of Story Cycle Time, but for features. The aim is the same: Feature Cycle Time will let you know for how many hours a feature was in progress without counting in the sitting time. The clock on FCT starts ticking when the first user story of a feature is sent to the development phase.\u00a0<\/span><\/p>\n<h3><b>Story Wait Time<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Story Wait Time (SWT) helps you measure the sitting time of task, and is also part of the Story Lead Time. Every team should reduce SWT as much as possible.<\/span><\/p>\n<h3><b>Story Throughput<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Story Throughput (ST) is similar to Sprint Velocity and helps to count the number of stories finished in a sprint. ST is easy to measure and encourages smaller stories. With this metric, stories should be included into the sprint they were completed, not started in.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Story Throughput is a highly useful metric. If all your stories are similar in size, you can use ST instead of Velocity. If your stories have a normal distribution (one part of your stories has a specific average size, and the other part goes below and above that average), you can also use ST instead of Sprint Burndown and Sprint Burnup.<\/span><\/p>\n<h3><b>Created-to-Finished Ratio<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">If you see that too many items are going back to backlog and few are finished, this metric may prove useful to access bottlenecks and the overall progress of your team. Early on in the project, the ratio can be high, but it is a rather common scenario. When a product is being shaped, your team members test different ideas and create stories for them. Expectedly, many of those ideas will not prove viable (or simply give birth to new, more effective ones). Still, Created-to-Finished Ratio needs to gradually go down over time. If it doesn\u2019t, there are setbacks in your development process or issues with some of the team members.\u00a0<\/span><\/p>\n<h2><b>Measuring Software Quality in Agile<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Today, customer demand prompts companies to deliver and update their software products faster. This means frequent changes to source code that can lead to both small and big defects. Although agile helps teams streamline the software development process, it is inseparable from security. While you will use metrics like Code Coverage, it is also important to assess code quality.\u00a0 As a result, conducting a comprehensive code analysis becomes crucial alongside using agile metrics.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are two types of code analysis and one more comprehensive approach that can help teams streamline their quality assurance across projects. Let\u2019s explore them below.\u00a0<\/span><\/p>\n<h3><strong>Static Code Analysis<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Static code analysis lets you inspect the source code without running the software. It will help you detect bugs, security soft spots, and various shortcomings early on in the project, allowing your team to build a product with clean code. Your QA experts can also automate or semi-automate the process with dedicated tools, most of which are available for free online.<\/span><\/p>\n<h3><strong>Dynamic Code Analysis<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Dynamic code analysis is the opposite, and lets you evaluate code quality of running software to see how it really works. Although static code analysis plays a bigger role, dynamic code analysis allows QA experts detect issues that arise when different elements of software communicate with each other. Still, it doesn\u2019t mean that dynamic code analysis can be skipped &#8212; you should use it alongside its counterpart.\u00a0<\/span><\/p>\n<h3><strong>Quality Intelligence\u00a0<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Often, code analysis is not enough. In a time when software needs to be delivered and updated quickly, you may want to make a comprehensive assessment to pinpoint soft spots in your development process related to quality assurance, and streamline your software delivery further. Quality intelligence tools provide a solution by helping teams gather data from across the entire software development lifecycle, analyze this data, and use it to improve their quality assurance workflows.\u00a0<\/span><\/p>\n<h2><b>What Are the Key Agile Software Development Metrics?<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Our selection includes agile software development metrics that will aid you in delivering quality software on time while ensuring the well-being of your team members. Still, using each and every one of the metrics on out list is not a precondition for success. In the end, the choice depends on your team\u2019s scrum\/kanban master, the team, and the agile culture in your company.<\/span><\/p>\n<hr \/>\n<h2><span style=\"font-weight: 400;\">Frequently Asked Questions<\/span><\/h2>\n<h3><span style=\"font-weight: 400;\">What is KPI in agile?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">When it comes to the software development process, a Key Performance Indicator (KPI) is any agile metric. Although the concept of KPI may be associated with rigid rules, agile software development still manages to be the most flexible approach to managing software development project as compared to the waterfall methodology.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">How is velocity calculated in agile?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">To calculate velocity for a project, you need to take the total number of finished story points and divide them by the number of finished sprints. If your team finished 90 stories over three sprints, its velocity will be 30 points per sprint.\u00a0<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">What is throughput in agile metrics?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Story Throughput is one of the core metrics in the kanban framework. It helps to count the number of stories that were completed in a single sprint. It is the analogue of the Spring Velocity metric in scrum.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">What is Agile Productivity?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Agile productivity may refer to how well a team performs on one agile metric or a number of them.\u00a0<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">What does APSI in agile metrics stand for?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">APSI has a wide array of meaning in different industries, but there is no such term in agile software development.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">What is agile matrix?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">There is a type of company structure called matrix, but there is no such thing as agile matrix in agile software development.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">What is agile productivity?<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Agile productivity may refer to how well a team performs on one agile metric or a number of them.\u00a0<\/span><\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Measure your team&#8217;s velocity, morale, and more.<\/p>\n","protected":false},"author":63,"featured_media":15989,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"These agile software development metrics will help you access your team\u2019s productivity and happiness, gauge software quality, and more. See the list.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"15+ Agile Metrics to Improve Productivity &amp; Software Quality\" \/>\n<meta property=\"og:description\" content=\"These agile software development metrics will help you access your team\u2019s productivity and happiness, gauge software quality, and more. See the list.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2018-12-10T16:01:48+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-08-26T22:15:18+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Agile-Team.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1300\" \/>\n\t<meta property=\"og:image:height\" content=\"750\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/Agile-Team.jpg\",\"width\":1300,\"height\":750,\"caption\":\"Agile Metrics\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/\",\"name\":\"15+ Agile Metrics to Improve Productivity & Software Quality\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/#primaryimage\"},\"datePublished\":\"2018-12-10T16:01:48+00:00\",\"dateModified\":\"2020-08-26T22:15:18+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"These agile software development metrics will help you access your team\\u2019s productivity and happiness, gauge software quality, and more. See the list.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/agile-metrics\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/15988"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=15988"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/15988\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/15989"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=15988"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=15988"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=15988"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}