{"id":13275,"date":"2016-06-16T16:23:22","date_gmt":"2016-06-16T13:23:22","guid":{"rendered":"https:\/\/stanfy.com\/?p=13275"},"modified":"2019-10-01T19:16:54","modified_gmt":"2019-10-01T16:16:54","slug":"how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/","title":{"rendered":"How We Migrated to Parse Server, Adventures With Heroku and Why We Broke Up"},"content":{"rendered":"<p>Parse made us to look for alternatives &amp; Parse Open Server sounded like a good option. This almost ended up as a failure and we had to go curve road with Heroku.<\/p>\n<p class=\"intro\">Special thank you to our iOS Engineers <a href=\"https:\/\/github.com\/deszip\">Igor<\/a> and <a href=\"https:\/\/twitter.com\/vitaliibogdan\">Vitalii<\/a> for their significant contributions to this post.<\/p>\n<p>Well, we were using Parse for many years and had lots of apps (for both development and production) running on Parse. Each app uses Parse at 100%: database storage, file storage, custom Cloud Code, push notifications, app configurations, A\/B testing and so on. On average, each of our apps has 4.5K lines of js\/python server code.<\/p>\n<p>Of course, we were somewhat frustrated after the Parse shutdown and began to look for\u00a0a way out: maybe you read our <a href=\"https:\/\/stanfy.com\/blog\/life-after-parse-what-to-do-next\/\">\u2018Life after Parse: what to do next\u2019<\/a> post. Instead of thoroughly rewriting our backend or hosting on another MBaaS platform, we decide to migrate to <a href=\"https:\/\/github.com\/ParsePlatform\/parse-server\">Parse Open Server<\/a>.<\/p>\n<p>Why not <a href=\"https:\/\/firebase.google.com\/features\/\">Firebase<\/a> or any other MBaaS? These services look promising, however using them means putting ourselves in a vendor lock-in again. Of course, there is also the added inconvenience of having to rewrite your cloud code and setup environment again.<\/p>\n<p>So, the next stage of migration was deploying Parse Open Server on Heroku.<\/p>\n<p class=\"upgrades\">If you want to skip technical details about setting up a server on Heroku, you can go directly to\u00a0<a href=\"#heroku-brokeup\"><strong>Why We Broke Up With Heroku.<\/strong><\/a><\/p>\n<h2>Why We Thought That Heroku Was Cool<\/h2>\n<p>The main idea is that you can migrate your app from Parse to Parse Server by using a free Heroku instance and deploying your database to mLab. Heroku is popular and it doesn\u2019t look like a service that is going to shut down in the near future.<\/p>\n<p>Heroku has a <a href=\"https:\/\/devcenter.heroku.com\/articles\/deploying-a-parse-server-to-heroku\">migration guide<\/a> that looks quite easy, and lots of <a href=\"https:\/\/elements.heroku.com\/addons\">additional features<\/a> you may need. Pricing plans <a href=\"https:\/\/www.heroku.com\/pricing\">look attractive<\/a> too (at least, you can deploy dev environment on Heroku for free before moving your production code there).<\/p>\n<p class=\"upgrades\">Parse is shutting down on\u00a0<strong>January 30, 2017<\/strong>\u00a0and you might need help migrating your apps. We can help with that,\u00a0<a href=\"https:\/\/www.intellectsoft.net\/contacts\">let&#8217;s talk<\/a>!<\/p>\n<h2>Our plan<\/h2>\n<blockquote><p>\u201cIt will be easy,\u201d \u2013 we thought. \u201cWe have a plan,\u201d \u2013 we thought.<\/p><\/blockquote>\n<p>Yes, we had a plan:<\/p>\n<ol>\n<li>Set up account on Heroku, migrate Parse settings.<\/li>\n<li>Migrate DB (to mLab).<\/li>\n<li>Migrate data to DB.<\/li>\n<li>Switch iOS app to the new server URL.<\/li>\n<li>Migrate Cloud Code and make it work (we will include more details about CC in next\u00a0post).<\/li>\n<li>Migrate static html pages (like FAQ or ToS) and make them public.<\/li>\n<li>Migrate Cloud Jobs and schedule them.<\/li>\n<li>Set up Parse Dashboard.<\/li>\n<li>Handle hosting images on AWS S3 bucket.<\/li>\n<li>Integrate APNS.<\/li>\n<\/ol>\n<p>We sorted items by priority (from most crucial to less) and started implementing them one-by-one.<\/p>\n<h2>Steps We Performed<\/h2>\n<h3>1. Set up heroku toolbelt.<\/h3>\n<p>Heroku has a handy Getting Started tutorial, <a href=\"https:\/\/devcenter.heroku.com\/articles\/getting-started-with-nodejs#set-up\">check it out<\/a>.<\/p>\n<h3>2. Initialize the repo.<\/h3>\n<p><strong>2.1 Put your cloud code to the separate repo.<\/strong> (If you don\u2019t have one, you can download an example project using <a href=\"https:\/\/github.com\/ParsePlatform\/parse-server-example\">Parse server module on Express<\/a>).<\/p>\n<p>The idea behind this is to use repo with two remotes: your server (let\u2019s say Github) and Heroku. Thus, your team can work with your own repo and push changes occasionally to the Heroku repo (aka \u2018deploy server code\u2019).<\/p>\n<p><strong>2.2 Log in to Heroku, using your credentials<\/strong><\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku login<\/pre>\n<p><strong>2.3 Add new remote repo, where \u2018herokutest\u2019 is the name of your repo.<\/strong><\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku git:remote -a herokutest<\/pre>\n<p>And we will see what happens next:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false plain:false plain-toggle:false lang:sh decode:true\">$ git remote -v\r\nheroku https:\/\/git.heroku.com\/herokutest.git (fetch)\r\nheroku https:\/\/git.heroku.com\/herokutest.git (push)\r\norigin https:\/\/yourgitserver\/herokutest.git (fetch)\r\norigin https:\/\/yourgitserver\/herokutest.git (push)<\/pre>\n<p>Heroku uses your code only from the master branch and ignores others. So it\u2019s safe to develop server code using git flow, and merge to master only tested changes.<\/p>\n<p><strong>2.4 Push changes:<\/strong><\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ git push heroku master<\/pre>\n<p>It\u2019s boring to watch the whole deploy process in logs, but we\u2019re waiting for \u2018status up\u2019, which means that the deployed code is running.<\/p>\n<h3>3. Import data<\/h3>\n<p>We use mLab for database storage.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard.png\"><img loading=\"lazy\" class=\"wp-image-13282\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard.png\" alt=\"mLab dashboard shows our migrated data\" width=\"740\" height=\"372\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard.png 1480w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-300x151.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-768x386.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-1024x514.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-600x301.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-450x226.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/mLab-dashboard-1000x502.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>The first thing to do is to create an account \u2013 read these guides if you haven\u2019t got an mLab account yet:<\/p>\n<p>\u2013 <a href=\"https:\/\/learnappmaking.com\/how-to-migrate-parse-app-parse-server-heroku-mongolab\/\">How to Migrate Your Parse App to Parse Server with Heroku and mLab<\/a><br \/>\n\u2013 <a href=\"https:\/\/medium.com\/@timothy_whiting\/setting-up-your-own-parse-server-568ee921333a#.jyb6h7vp1\">Setting up Your Parse Server<\/a><\/p>\n<p>Then it\u2019s time to transfer data!<\/p>\n<p><strong>3.1 Manually<\/strong><br \/>\n<em>(warning: it shouldn\u2019t be your first preference, I mean it!)<\/em><\/p>\n<p>Export .zip archive with your data from Parse and change JSON structure a bit: remove root element \u201cresults\u201d and change it to root element array.<br \/>\nFrom this json:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">{\r\n\t\"results\": [{\r\n\t\t\"field1\": \"value1\",\r\n\t\t\"field2\": \"value2\"\r\n\t}]\r\n}<\/pre>\n<p>To this:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">[{\r\n\t\"field1\": \"value1\",\r\n\t\"field2\": \"value2\"\r\n}]\r\n<\/pre>\n<p>Change keys from \u201cobjectId\u201d to Mongo-style indexes named \u201c_id\u201d:<\/p>\n<pre class=\"font-size:14 line-height:18 width:700 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">sed -e 's\/\\\"objectId\\\":\/\\\"_id\\\":\/g' .\/_Installation.json | jq . &gt; _Installation_mapped.json<\/pre>\n<p>Then import every json entity (aka every table in your db) to mLab:<\/p>\n<pre class=\"font-size:14 line-height:18 width:700 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">mongoimport -h &lt;host&gt;:&lt;port&gt; -d &lt;database_name&gt; -c &lt;documentname&gt; -u &lt;username&gt; -p &lt;password&gt; --file .\/&lt;file&gt;.json --jsonArray<\/pre>\n<p><strong>3.2 Using Migrate Button on Parse<\/strong><\/p>\n<p>The Parse team was so kind as to allow users to route all their data to alternative MongoDB installation. That\u2019s called \u2018Migrate to external database\u2019. All you need is MongoDB installation with allowed external connections. Then you build the URL like this:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">mongodb:\/\/&lt;dbuser&gt;:&lt;dbpassword&gt;@&lt;host&gt;:&lt;port&gt;\/&lt;database_name&gt;<\/pre>\n<p>In case you are using mLab to host your data you can find this URL in your dashboard. It will look like this:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">mongodb:\/\/&lt;dbuser&gt;:&lt;dbpassword&gt;@ds013320.mlab.com:13320\/heroku_rfm7878d7<\/pre>\n<p>Then navigate to Open App Settings \u2192 App Management \u2192 Migrate in your Parse dashboard, add the link to your mLab database.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration.png\"><img loading=\"lazy\" class=\"wp-image-13283\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration.png\" alt=\"What happens when you press \u2018Migrate\u2019 button\" width=\"740\" height=\"255\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration.png 1499w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-300x103.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-768x264.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-1024x352.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-600x207.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-450x155.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse_mongo_migration-1000x344.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>Migration has three steps:<\/p>\n<ol>\n<li>Parse replicates your scheme to the remote MongoDB instance. This means it creates the same collections you had on Parse. This includes all service ones, so be prepared to see some unusual extra data you haven\u2019t seen before in a data browser.<\/li>\n<li>Parse copies all the data from your parse DB to the remote one.<\/li>\n<li>Parse forwards all read\/write calls to your external DB instead of to the old one hosted by Parse itself.<\/li>\n<\/ol>\n<p>At the third step you can cancel migration \u2013 at this point you have full backup of your data, enjoy!<\/p>\n<p>Please, read <a href=\"http:\/\/parse.com\/migration#database\">Parse Database Migration Guide<\/a> carefully before trying to reproduce steps above.<\/p>\n<p>One issue we encountered with migrating DB is that Parse won\u2019t do anything unless your external DB is empty. That\u2019s obvious, but what is more unexpected is that Parse starts to forward calls to the new DB before copying your data, between the first and second steps. So if you\u2019re lucky enough to get some write calls during migration, it will fail, complaining that the external DB is not empty. If you look into your database after that, you\u2019ll find all collections schemes replicated and some random data forwarded here from your backend. Just switch off your app before migration or stop your UI tests for a while \ud83d\ude42<\/p>\n<p>Press \u2018Stop Migration\u2019 when the first stripe becomes green. Menu Core now has \u2018Migration\u2019 item, but don\u2019t be afraid, it\u2019s okay.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled.png\"><img loading=\"lazy\" class=\"wp-image-13284\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled.png\" alt=\"Cancel Parse migration to migrate scheme only\" width=\"740\" height=\"389\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled.png 1116w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-300x158.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-768x404.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-1024x539.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-600x316.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-450x237.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/parse-migration-cancelled-1000x526.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p>To support keys that are longer than 1024 bytes, you should disable <span class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false lang:default highlight:0 decode:true crayon-inline\">failIndexKeyTooLong<\/span> warning in mLab. This option is not available if you\u2019re using <a href=\"http:\/\/docs.mlab.com\/migrating-from-parse\/#choosing-a-plan\">SandBox plan<\/a>.<\/p>\n<p>Unfortunately, now we\u2019re responsible for handling database scaling and indexing, which makes support of production backends an especially somber task.<\/p>\n<h3>4. Schedule Cloud jobs<\/h3>\n<p>No more cloud jobs. Forget about them.<\/p>\n<p>However, you can run simple tasks using <a href=\"https:\/\/devcenter.heroku.com\/articles\/scheduler#installing-the-add-on\">Heroku scheduler add-on<\/a>. It runs script in <a href=\"https:\/\/devcenter.heroku.com\/articles\/one-off-dynos\">one-off dyno<\/a> and has <a href=\"https:\/\/devcenter.heroku.com\/articles\/dyno-types#default-scaling-limits\">lots of limitations<\/a>.<\/p>\n<p>Cloud job is not a real job anymore; it\u2019s just a piece of js code that runs on Node. It means you should initiate Parse server before the job can access it:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">var Parse = require('parse\/node');\r\nParse.initialize(&lt;your-repo-name&gt;, &lt;master-key&gt;, &lt;master-key&gt;);\r\nParse.serverURL = 'http:\/\/&lt;your-repo-name&gt;.herokuapp.com\/parse\/';\r\nParse.Cloud.useMasterKey();<\/pre>\n<p>We use <a href=\"https:\/\/scheduler.heroku.com\/dashboard\">Heroku scheduler dashboard<\/a> to run these \u2018jobs\u2019.<br \/>\nTo test your job, run one-off dyno:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku run bash<\/pre>\n<p>And run your script manually:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ node .\/cloud\/jobs\/awesomeJob.js<\/pre>\n<p>Unfortunately, you need to quit and enter one-off node again \u2013 only then will it pull your changes.<\/p>\n<p>The scheduler allows you to schedule tasks once a day, once an hour or every ten minutes. That\u2019s all.<\/p>\n<p>For more convenient timing, you should use clock command from procfile. You should write the configuration file, that allows you to describe more complicated schemes (like \u201crun this job every 3 hours during working days and every hour during weekends\u201d). We didn\u2019t use it, but if you\u2019re interested, read <a href=\"https:\/\/devcenter.heroku.com\/articles\/scheduled-jobs-custom-clock-processes-java-quartz-rabbitmq\">this java example<\/a>.<\/p>\n<p>The main caveat is that such scheduled tasks are running in the special background queue that uses one worker dyno. Having more than one worker dyno is beyond the limitations of the <a href=\"https:\/\/www.heroku.com\/pricing\">Free pricing plan<\/a>.<\/p>\n<p>And finally, this great quote from the docs:<\/p>\n<blockquote><p>There is no guarantee that jobs will execute at their scheduled time, or at all. Scheduler has a known issue whereby scheduled processes are occasionally skipped.<\/p><\/blockquote>\n<h3>5. Set up APNS<\/h3>\n<p>Read the \u201cPush Notification\u201d section from <a href=\"https:\/\/github.com\/ParsePlatform\/Parse-Server\/wiki\/Push\">Parse Server Guide<\/a> carefully to get the main idea.<\/p>\n<p>First, add APN credentials to the Parse Server init:<\/p>\n<pre class=\"line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">push: {\r\n  android: {\r\n    senderId: '', \/\/ The Sender ID of GCM\r\n    apiKey: '' \/\/ The Server API Key of GCM\r\n  },\r\n  ios: {\r\n    pfx: '', \/\/ The filename of private key and certificate in PFX or PKCS12 format from disk\r\n    cert: '', \/\/ If not using the .p12 format, the path to the certificate PEM to load from disk\r\n    key: '', \/\/ If not using the .p12 format, the path to the private key PEM to load from disk\r\n    bundleId: '', \/\/ The bundle identifier associate with your app\r\n    production: false \/\/ Specifies which environment to connect to: Production (if true) or Sandbox\r\n  }\r\n}<\/pre>\n<p>To use both production and dev push certificates, just add two items to the iOS array:<\/p>\n<pre class=\"line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">push: {\r\n\tios: [{\r\n\t\tpfx: '', \/\/ Dev PFX or P12\r\n\t\tbundleId: '',\r\n\t\tproduction: false \/\/ Dev\r\n\t}, {\r\n\t\tpfx: '', \/\/ Prod PFX or P12\r\n\t\tbundleId: '',\r\n\t\tproduction: true \/\/ Prod\r\n\t}]\r\n}<\/pre>\n<p>The second step is to add options parameter with useMasterKey enabled to the Parse.push.send() call:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">Parse.Push.send({\r\n\tchannels: [channel],\r\n\tdata: data\r\n}, { useMasterKey: true });<\/pre>\n<p>Switching between production and dev servers is described like this:<\/p>\n<blockquote><p>Parse Server&#8217;s strategy on choosing them is trying to match installations&#8217; appIdentifier with bundleId first. If it can find some valid certificates, it will use those certificates to establish the connection to APNS and send notifications. If it cannot find, it will try to send the notifications with all certificates. Prod certificates first, then dev certificates.<\/p><\/blockquote>\n<h3>6. Amazon S3<\/h3>\n<p>When you were using Parse, you didn\u2019t consider where it stores file, right? PFFile is an excellent wrapper for all your photos or text files.<\/p>\n<p>Now you need to handle file storage yourself. We prefer AWS S3, and it\u2019s commonly used. We have registered the account there and are ready to create a bucket.<\/p>\n<p><strong>6.1 Configure bucket<\/strong><\/p>\n<p>Fortunately, configuring S3 bucket for Parse storage is quite easy: <a href=\"https:\/\/github.com\/ParsePlatform\/parse-server\/wiki\/Configuring-File-Adapters#configuring-s3adapter\">there\u2019s a guide for that!<\/a>\u00a0Remember that bucket name shouldn\u2019t contain dots.<\/p>\n<p>Make sure that after performing all steps described in the guide your policy looks similar to this:<\/p>\n<pre class=\"line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">{\r\n\t\"Version\": \"2012-10-17\",\r\n\t\"Statement\": [{\r\n\t\t\"Sid\": \"Stmt145097236257572\",\r\n\t\t\"Effect\": \"Allow\",\r\n\t\t\"Principal\": \"*\",\r\n\t\t\"Action\": \"s3:*\",\r\n\t\t\"Resource\": \"arn:aws:s3:::&lt;your-bucket-name&gt;\/*\"\r\n\t}]\r\n}<\/pre>\n<p>Now apply this policy to the bucket: select your bucket in S3 console, tap &#8216;Properties&#8217; button in the top right corner. Expand &#8216;Permissions&#8217; section, press &#8216;Edit bucket policy&#8217; and paste json above in the text field.<\/p>\n<p><a href=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy.png\"><img loading=\"lazy\" class=\"wp-image-13285\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy.png\" alt=\"Configuring Amazon Bucket Policy\" width=\"740\" height=\"303\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy.png 1480w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-300x123.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-768x314.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-1024x419.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-600x245.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-450x184.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/amazon-bucket-policy-1000x409.png 1000w\" sizes=\"(max-width: 740px) 100vw, 740px\" \/><\/a><\/p>\n<p><strong>6.2 Configure Parse Server<\/strong><\/p>\n<p>Now it\u2019s time to configure Parse Server to make it save files to our bucket.<\/p>\n<p>Configure S3 adapter:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">var S3Adapter = require('parse-server').S3Adapter;\r\nvar s3Adapter = new S3Adapter(\r\n    \"AWS_KEY\",\r\n    \"AWS_SECRET_KEY\",\r\n    \"bucket-name\",\r\n    { directAccess: true }\r\n);<\/pre>\n<p>and add two lines to the Parse Server init:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-title:false show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:js decode:true\">    filesAdapter: s3Adapter,\r\n    fileKey: process.env.PARSE_FILE_KEY<\/pre>\n<h3>7. Things to make your life easier<\/h3>\n<p><strong>7.1 Setup vim<\/strong><\/p>\n<p>Install <a href=\"https:\/\/github.com\/naaman\/heroku-vim\">vim plugin<\/a> like this:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku plugins:install https:\/\/github.com\/naaman\/heroku-vim<\/pre>\n<p>Then you can use heroku vim to open vim during the current session. The filesystem is virtual, so all your changes affect only the current dyno. It means that you can you vim for debugging only.<\/p>\n<p><strong>7.2 Restart your app<\/strong><\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku restart -a &lt;your-app-name&gt;<\/pre>\n<p><strong>7.3 Read the logs<\/strong><\/p>\n<p>Use following command:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true\">$ heroku logs<\/pre>\n<p>Or add -t to read logs in interactive mode:<\/p>\n<pre class=\"font-size:14 line-height:18 toolbar:2 show-lang:2 nums:false nums-toggle:false wrap:true plain:false plain-toggle:false lang:sh decode:true \">$ heroku logs -t<\/pre>\n<p>It\u2019s much easier to read logs in the terminal than to read weblogs in the dashboard.<\/p>\n<h2 id=\"heroku-brokeup\">Why We Broke Up With Heroku<\/h2>\n<p>On the one hand, everything is okay: Heroku has a nice infrastructure, lots of migration tutorials and we got the app running in the end. But on the other hand, we have experienced a lot of difficulties during the migration process and were not able to create a workable flow for developing future apps. It\u2019s not about the migration process itself, but more about how you feel in this ecosystem, how it suits your purposes and your development flow.<\/p>\n<h3>Deploy latency<\/h3>\n<p>Making sure that your code is working is important. Because the dev environment is set up on Heroku, the dev code needs to be deployed there too. It took us 20-30 seconds of waiting until the deployed code was running. It&#8217;s quite a long time, especially when you have to debug new feature.<\/p>\n<p>A way of fixing this issue is to deploy and test code on your local infrastructure first. But this involves another drawback \u2013 the infrastructures differ.<\/p>\n<h3>Infrastructure peculiarities<\/h3>\n<p>The major advantage of Parse was that it handled everything, but now we need to use different service providers. For example, using mLab is great: they provide you the database and take care of scaling, upgrading, machine issues, etc. Unfortunately, mLab doesn\u2019t compress your data, so your <a href=\"https:\/\/github.com\/ParsePlatform\/parse-server\/wiki\/Parse-Server-Guide#database\">db takes ~10x more space<\/a> than it took on Parse.<\/p>\n<p>Unfortunately, the <a href=\"https:\/\/mlab.com\/plans\/\">mLab free plan<\/a> covers only 500MB of database storage. It means you will have to pay for the production apps, but maybe you will even need to pay for dev ones. The database that we migrated wasn\u2019t very large, but neither was it small, because we didn\u2019t care about cleaning up test data.<\/p>\n<p>Now we need to clean up the database on a regular basis. Welcome, night-time jobs, that run and clean up the outdated rows.<\/p>\n<h3>Dev vs Prod: the difference in environment<\/h3>\n<p>Our main idea is to have dev and production environments as similar as possible. In terms of servers, it would mean that your software versions are the same (OS, mLab, Parse Server and other tools should be configured identically).<\/p>\n<p>You can set up and run both Parse Server and MongoDB locally on your machine, but you can\u2019t be sure that mLab uses the same MongoDB version as you (and won\u2019t update it suddenly).<\/p>\n<p>So we decided to use Heroku for both prod and dev apps.<\/p>\n<p>That\u2019s where the problems arose.<\/p>\n<p>It\u2019s not easy to write server code by several developers at the same time; you can\u2019t just deploy your changes while testing without re-writing somebody else\u2019s changes. Well, we experienced similar issues using Parse, but they have the Clone app button, allowing you to clone your current app and to play with it, before deploying your changes to the dev one.<\/p>\n<p>Deploying on Heroku takes a lot of time and debugging is more about \u2018reading logs\u2019. Anyway, even to read the logs, you need to wait while weblogs update, or you can collect logs via ssh (and use one dyno for this).<\/p>\n<h3>Tricky pricing<\/h3>\n<p>At first glance, the <a href=\"https:\/\/www.heroku.com\/pricing\">free plan<\/a> appears straightforward, but then you realize that your dyno <a href=\"https:\/\/devcenter.heroku.com\/articles\/dyno-sleeping\">needs to sleep<\/a> for six hours a day, which means that requests that \u2018awaken\u2019 your dyno take longer than others.<\/p>\n<p>Then you realize that there are different <a href=\"https:\/\/devcenter.heroku.com\/articles\/dyno-types#available-dyno-types\">types of dyno<\/a>, and worker dyno and \u2018one-off\u2019 dyno are completely separate entities.<br \/>\nFurthermore, <a href=\"https:\/\/devcenter.heroku.com\/articles\/dyno-types#concurrent-one-off-dyno-limits\">if your account is not verified<\/a>, you have another set of constraints to deal with.<\/p>\n<p>Well, of course, sooner or later you understand how things are, but it really takes some time before you can answer the question \u201chow much will we pay for the app after migration?\u201d.<\/p>\n<p class=\"upgrades\">Parse is shutting down on\u00a0<strong>January 30, 2017<\/strong>\u00a0and you might need help migrating your apps. We can help with that,\u00a0<a href=\"https:\/\/www.intellectsoft.net\/contacts\">let&#8217;s talk<\/a>!<\/p>\n<h2>Summary<\/h2>\n<p>Migration is fun. At the end of the day you can read every post on the internet about Parse migration, but the proof of the pudding is in the eating.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Heroku is popular and it doesn\u2019t look like a service that is going to shut down in the near future.<\/p>\n","protected":false},"author":63,"featured_media":13281,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[800],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Learn about our migrate Parse to Heroku process. Why was it cool at first and then turned into failure? Detailed overview of the process and our experience.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Migrate Parse to Heroku: The Road of Change and Failure\" \/>\n<meta property=\"og:description\" content=\"Learn about our migrate Parse to Heroku process. Why was it cool at first and then turned into failure? Detailed overview of the process and our experience.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2016-06-16T13:23:22+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-10-01T16:16:54+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/How-We-migrated-to-Parse-Open-Server-Part-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1480\" \/>\n\t<meta property=\"og:image:height\" content=\"833\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/How-We-migrated-to-Parse-Open-Server-Part-1.jpg\",\"width\":1480,\"height\":833},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/\",\"name\":\"Migrate Parse to Heroku: The Road of Change and Failure\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/#primaryimage\"},\"datePublished\":\"2016-06-16T13:23:22+00:00\",\"dateModified\":\"2019-10-01T16:16:54+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Learn about our migrate Parse to Heroku process. Why was it cool at first and then turned into failure? Detailed overview of the process and our experience.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/how-we-migrated-to-parse-server-adventures-with-heroku-and-why-we-broke-up\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13275"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=13275"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/13275\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/13281"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=13275"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=13275"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=13275"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}