{"id":10234,"date":"2015-09-03T11:52:44","date_gmt":"2015-09-03T08:52:44","guid":{"rendered":"https:\/\/stanfy.com\/?p=10234"},"modified":"2019-10-28T18:43:13","modified_gmt":"2019-10-28T15:43:13","slug":"do-not-let-your-user-see-spinners","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/","title":{"rendered":"Do Not Let Your User See Spinners"},"content":{"rendered":"<p>Today, we are writing applications. And each application is connected to the Internet. Let\u2019s just talk about those applications which are connected to the Internet. Often, when users perform some operation in the application, a server response is needed, so while this response is being performed, the user is staring at the spinner.<\/p>\n<p>There\u2019s no problem with that if you really need to have a server response, and you need to have 100% correct data only. But the thing is that there are a lot of times when we can easily avoid showing the spinner to the user, and trick the user, showing him what he wants to see rather than showing spinners during every user interaction, even if those spinners are cute.<\/p>\n<h3>Types of user interaction<\/h3>\n<p>Let\u2019s look at user interactions from the perspective of user expectations. When doing some operations in the application, the user can\u2019t be sure about the result \u2014 before a publication is opened, it\u2019s hard to predict its contents. On the other hand, some operations are highly predictable for the user:<\/p>\n<ul>\n<li>liking a favorite post<\/li>\n<li>writing a comment<\/li>\n<li>following\/unfollowing another user<\/li>\n<\/ul>\n<p>Often all these operations require an internet connection in order to be executed, and in badly designed applications, we often see a spinner after each operation. In very badly designed applications, we see a spinner which locks the whole application screen (and which we don\u2019t have the ability to cancel).<\/p>\n<h3>Idea<\/h3>\n<p>Somehow we need to convince the user that these operations are performing immediately. And here we\u2019ll explain how we do that in our applications.<\/p>\n<p>This approach doesn\u2019t require big architecture solutions from the start and can be implemented at any moment of the application development cycle, without any harm to the original. Still, there are few things which are not required, but highly recommended. These things aren\u2019t new and you can find a lot of information about how to use them correctly and why you need to have them in your application.<\/p>\n<h3>Requirements<\/h3>\n<h4>View Layer without logic<\/h4>\n<p>Taken from <a href=\"https:\/\/en.wikipedia.org\/wiki\/Model_View_ViewModel\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM <\/a>pattern. The main idea is that the View Layer doesn\u2019t know anything about your business logic. All that this View Layer should care about are simple, plain objects, which have no business logic in them, or at least the View Layer shouldn\u2019t know anything about it:<br \/>\n<script src=\"https:\/\/gist.github.com\/PaulTaykalo\/8b21b87f4630dc9c631e.js\"><\/script><\/p>\n<h4>Updateable View Layer<\/h4>\n<p>The View layer should reflect any data changes that are performed in the data it renders. Let\u2019s say a person\u2019s name was changed. Your view should behave correctly, and be able to update itself when this happens. In our examples UIViewController will be the object which will respond to the changes in the model and will tell View to update itself with new data.<\/p>\n<h4>Request Manager<\/h4>\n<p>This is the object that is responsible for network operations in your application. You should have one (I hope you do). Also, it\u2019s even better if your ViewController speaks with the Model layer, and the Model layer itself speaks with Request Manager. Again, this is not required, but this is how it works in our applications.<script src=\"https:\/\/gist.github.com\/PaulTaykalo\/1b3d9d7837dac390fa40.js\"><\/script><\/p>\n<p>&nbsp;<\/p>\n<h3>Application Structure<\/h3>\n<p>Here\u2019s how(probably) your application works now. This is waaay too schematic, but you can update it with your own Structural Units.<\/p>\n<p><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2016\/09\/1-ED5bsflS_fqtzxudydgGWg.png\"><img loading=\"lazy\" class=\"aligncenter wp-image-13705 size-full\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2016\/09\/1-ED5bsflS_fqtzxudydgGWg.png\" width=\"800\" height=\"492\" \/><\/a><\/p>\n<p>So here\u2019s what happens:<\/p>\n<ul>\n<li>Model gets the data from internet<\/li>\n<li>ViewController listens to the data from Model and updates View<\/li>\n<li>User Performs some Action on the View<\/li>\n<li><strong>Spinner starts<\/strong><\/li>\n<li>View Controller tells Model to handle action<\/li>\n<li>Model goes to the internet(to the server, for example)<\/li>\n<li>Model gets response from the server<\/li>\n<li>ViewController\u2019s callback got called<\/li>\n<li>ViewController updates view<\/li>\n<li><strong>Spinner stops<\/strong><\/li>\n<\/ul>\n<h4>Let\u2019s add one small thing<\/h4>\n<p>In order to trick the user we\u2019ll need to have just one simple thing \u2014 the Optimistic Model.<\/p>\n<h3>Optimistic Model<\/h3>\n<figure id=\"attachment_10243\" aria-describedby=\"caption-attachment-10243\" style=\"width: 766px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/1-AL4GpBNDyiG3FV-z_stPQw.jpg\"><img loading=\"lazy\" class=\"wp-image-10243\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/1-AL4GpBNDyiG3FV-z_stPQw.jpg\" alt=\"Do not let your user see spinners \u2014 Optimistic Model\" width=\"766\" height=\"542\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-AL4GpBNDyiG3FV-z_stPQw.jpg 800w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-AL4GpBNDyiG3FV-z_stPQw-300x212.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-AL4GpBNDyiG3FV-z_stPQw-768x543.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-AL4GpBNDyiG3FV-z_stPQw-600x425.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-AL4GpBNDyiG3FV-z_stPQw-450x318.jpg 450w\" sizes=\"(max-width: 766px) 100vw, 766px\" \/><\/a><figcaption id=\"caption-attachment-10243\" class=\"wp-caption-text\">Do not let your user see spinners \u2014 Optimistic Model<\/figcaption><\/figure>\n<p>The idea behind that is pretty straightforward. When the user changes something, the optimistic model gets the original object, tries to predict the potential result, then calls ViewController\u2019s callback with this updated object, and then performs the actual operation in the background like the default Model. Once the real result is returned from the server, the optimistic model calls callback with the real object, or in case of an error, the Model performs callback with the original object and then calls error callback.<a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/1-ED5bsflS_fqtzxudydgGWg1.png\"><br \/>\n<\/a><\/p>\n<p>If we highlight possible flows, they can look like this:<\/p>\n<figure id=\"attachment_10244\" aria-describedby=\"caption-attachment-10244\" style=\"width: 766px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/1-d_PrDCVrhRXocq57AgEYwA.jpg\"><img loading=\"lazy\" class=\"wp-image-10244\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/09\/1-d_PrDCVrhRXocq57AgEYwA.jpg\" alt=\"Do not let your user see spinners \u2014 Optimistic Model Flows\" width=\"766\" height=\"542\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-d_PrDCVrhRXocq57AgEYwA.jpg 800w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-d_PrDCVrhRXocq57AgEYwA-300x212.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-d_PrDCVrhRXocq57AgEYwA-768x543.jpg 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-d_PrDCVrhRXocq57AgEYwA-600x425.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-d_PrDCVrhRXocq57AgEYwA-450x318.jpg 450w\" sizes=\"(max-width: 766px) 100vw, 766px\" \/><\/a><figcaption id=\"caption-attachment-10244\" class=\"wp-caption-text\">Do not let your user see spinners \u2014 Optimistic Model Flows<\/figcaption><\/figure>\n<h4>Optimistic Model Implementation<\/h4>\n<p>Now, let\u2019s look how the Optimistic Model implementation can look like.<br \/>\n<script src=\"https:\/\/gist.github.com\/PaulTaykalo\/f4bce0dad1bd9fee76bc.js\"><\/script><\/p>\n<p>&nbsp;<\/p>\n<p>With this simple update we were able to perform network operations \u201cimmediately\u201d (at least from the user perspective).<\/p>\n<h4>Let\u2019s Summarize<\/h4>\n<p>What do we have as the result?<\/p>\n<ul>\n<li>A happy user who doesn\u2019t need to wait for each operation to finish:)<\/li>\n<li>A happy user, who thinks that your application is blazingly fast(even if your server is really slow).<\/li>\n<\/ul>\n<h4>Notes<\/h4>\n<ul>\n<li>In the example, we\u2019re copying the object. This is done to prevent some unexpected changes, which can occur, for example, when there are other references on this object in the application.<\/li>\n<li>In the example, in server response, we have a fully updated object. In the real world application, this rarely true. Anyway, even if server responds with partial updates, this approach can work correctly.<\/li>\n<li>The Optimistic Model can be simply used for independent properties or groups of properties of object.<\/li>\n<li>Depending on your needs, you probably would need to have Local Storage, which will store data that has not been sent to the server yet.<\/li>\n<li>In complex case, when user tries to perform different operations quickly on the same object, you will probably need to use Temporary\/Shadow Storage, which will decide what to show. An example of the implementation of this object will be covered in next post.<\/li>\n<\/ul>\n<p>Read the Part II of the article: <a href=\"https:\/\/intellectsoft.net\/blog\/optimistic-models-%E2%80%8Ahandling-multiple-interactions-without-server-confirmation\/\" target=\"_blank\" rel=\"noopener noreferrer\">Optimistic Models: Handling Multiple Interactions Without Server Confirmation<\/a>.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Today, we are writing applications. And each application is connected to the Internet. Let\u2019s just talk about those applications which are connected to the Internet&#8230;.<\/p>\n","protected":false},"author":63,"featured_media":14604,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Loading spinners are the last things users what to see when opening your application. Learn how to minimize times they are shown or even get rid of them.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Loading Spinners: How to Get Rid of Them?\" \/>\n<meta property=\"og:description\" content=\"Loading spinners are the last things users what to see when opening your application. Learn how to minimize times they are shown or even get rid of them.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2015-09-03T08:52:44+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-10-28T15:43:13+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-V3h-VWthi5lL0QySF6qZPw.gif\" \/>\n\t<meta property=\"og:image:width\" content=\"192\" \/>\n\t<meta property=\"og:image:height\" content=\"192\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/1-V3h-VWthi5lL0QySF6qZPw.gif\",\"width\":192,\"height\":192},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/\",\"name\":\"Loading Spinners: How to Get Rid of Them?\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/#primaryimage\"},\"datePublished\":\"2015-09-03T08:52:44+00:00\",\"dateModified\":\"2019-10-28T15:43:13+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Loading spinners are the last things users what to see when opening your application. Learn how to minimize times they are shown or even get rid of them.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/do-not-let-your-user-see-spinners\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10234"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=10234"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10234\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/14604"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=10234"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=10234"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=10234"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}