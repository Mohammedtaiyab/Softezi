{"id":9332,"date":"2015-04-09T23:56:01","date_gmt":"2015-04-09T20:56:01","guid":{"rendered":"https:\/\/stanfy.com\/?p=9332"},"modified":"2019-11-27T18:28:54","modified_gmt":"2019-11-27T15:28:54","slug":"conflict-free-git-trees-part-2","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/","title":{"rendered":"How to Make Conflict-Free Git Trees? (Part 2)"},"content":{"rendered":"<p>In the <a href=\"https:\/\/intellectsoft.net\/blog\/conflict-free-git-trees-part-1\u200e\" target=\"_blank\" rel=\"noopener noreferrer\">first part<\/a> we started exploring Git tree planting and spoke about how to make easy-to-use and elegant trees. In this article we\u2019ll discover a cheat-list of rules and practices that we as\u00a0an app development company use in our work. These tips will be useful to you regardless of what kind of Git branching strategy you&#8217;ll choose.<\/p>\n<h2>Versions\u2019 names<\/h2>\n<p>Whatever strategy you use, when you make releases you add tags (at least, people say that it is worth it to do so). Tags contain the number of the current version of your product. This version should be brief, but contain the largest possible amount of information.<\/p>\n<p>Of course, this is not a new problem, so there is a well known solution:<a href=\"http:\/\/semver.org\/)\"> semantic versioning<\/a>. It is worth mentioning that these rules were written for API versioning. Including three segments in the version number is suggested:<\/p>\n<div class=\"codeblock\"><b>&lt;<span style=\"color: #ff6600;\">major version<\/span>&gt;<\/b><b>.<\/b><b>&lt;<span style=\"color: #3366ff;\">minor version<\/span>&gt;<\/b><b>.<\/b><b>&lt;<span style=\"color: #339966;\">patch version<\/span>&gt;<\/b><\/div>\n<ul>\n<li>The <span style=\"color: #ff6600;\"><strong>major version<\/strong><\/span> increases when a new version of the API is not compatible with the old one (code that worked with API 1.x, very likely will not work with API 2.x).<\/li>\n<li>The <span style=\"color: #3366ff;\"><strong>minor version<\/strong><\/span> increases when more big features are added to the program, but backward compatibility is maintained.<\/li>\n<li>The <span style=\"color: #339966;\"><strong>patch version<\/strong><\/span> increases when corrections are published.<\/li>\n<\/ul>\n<p>You may notice that these rules are not well suited for the case of mobile app development, so we changed them. We use the following scheme:<\/p>\n<div class=\"codeblock\"><b>&lt;<span style=\"color: #ff6600;\">major version<\/span>&gt;<\/b>.<b>&lt;<span style=\"color: #3366ff;\">minor version<\/span>&gt;<\/b>.<b>&lt;<span style=\"color: #339966;\">patch version<\/span>&gt;<\/b>.<b>&lt;<span style=\"color: #ffcc00;\">build number<\/span>&gt;-<\/b><b>&lt;<span style=\"color: #99cc00;\">buildtype<\/span>&gt;<\/b><\/div>\n<ul>\n<li>The <span style=\"color: #ff6600;\"><strong>major version<\/strong><\/span> changes if the application architecture changes and it affects all the components in the app.<\/li>\n<li>The <span style=\"color: #3366ff;\"><strong>minor version<\/strong><\/span> increases with the addition of new features.<\/li>\n<li>The <span style=\"color: #339966;\"><strong>patch version<\/strong><\/span> is increased when you add some bug fixes or patches.<\/li>\n<li>The <span style=\"color: #ffcc00;\"><strong>build number<\/strong><\/span> is used to distinguish the assembles collected from the same code, but in a changed environment (for example, you changed the settings of your Jenkins tasks).<\/li>\n<li>Finally, the <span style=\"color: #99cc00;\"><strong>build type<\/strong><\/span> is used to designate keys that are used in the assembly (debug, dogfood, release, etc.)<\/li>\n<\/ul>\n<h2>Rules for working with feature branches and history changing<\/h2>\n<p>Whatever strategy you choose, you will use feature branches. We have developed a small set of rules for working with them:<\/p>\n<ul>\n<li>One feature branch should contain only one feature.<\/li>\n<li>You should strive to make not very large branches (if the pull request contains more than 1000 lines of code, it is unlikely that someone will be very attentive to such changes).<\/li>\n<\/ul>\n<p>In addition, commits should be as atomic as possible in feature branches \u2013 they should carry a single logical scope of changes.<\/p>\n<p><strong>An example of a poor log:<\/strong><\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>443e51f<\/b> First 1.5 operations of 3-step process<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>ba08771<\/b> Second 1.5 operations of 3-step process<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>d58b327<\/b> Ololo I&#8217;m too lazy to make a good commit message for these changes<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>df8cf79<\/b> Fix for the 2nd operation of 3-step process<\/span><\/div>\n<p><strong>An example of a good log:<\/strong><\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>443e51f<\/b> 3-step process<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>ba08771<\/b> Documentation for 3-step process<\/span><\/div>\n<p>In order to make a readable and moderately detailed story, Git provides tools for history changing.<\/p>\n<p>The first tool is <b>amend <\/b>\u2013 which changes the last commit. When you are just starting to work on the changes, you make the first commit (for example, interface, implementation of which will solve the problem).<\/p>\n<p>Then you add the new changes, but instead of creating a new commit you execute command:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>git<\/b> <span style=\"color: #ff6600;\">commit<\/span>\u00a0&#8212;-amend<\/span><\/div>\n<p>This command does not create a new commit, but changes the previous one and allows you to change the commit message.<\/p>\n<p>This solution has one drawback &#8211; you lose a story within a single commit. In other matters, this disadvantage is not so critical, if you work in the IDE; usually they have a local story that best suits such small and recent changes.<\/p>\n<p>Of course, when you are working on changes, you can see the system on a large scale and it is difficult to immediately identify a sufficiently large number of changes to commits. That is why Git will help you again if the story you received as a result does not satisfy you; you can use <strong>squash<\/strong> (<a href=\"http:\/\/git-scm.com\/book\/en\/v2\/Git-Tools-Rewriting-History\">documentation<\/a> on it ). It is a tool to merge multiple commits into one.<\/p>\n<p>Let&#8217;s say, when you are ready to do a pull request of your feature branch, you see its log:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>ce6578a<\/b> OAuth screen <span style=\"color: #99cc00;\"><i>&lt;&#8211; commit in the master<\/i><\/span><\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>443e51f<\/b> First 1.5 operations of 3-step process <span style=\"color: #99cc00;\"><i>&lt;&#8211; first commit in the feature branch<\/i><\/span><\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>ba08771<\/b> Second 1.5 operations of 3-step process<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>d58b327<\/b> Ololo I&#8217;m too lazy to make a good commit message for these changes<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>df8cf79<\/b> Fix for 2nd operation of 3-step process<\/span><\/div>\n<p>You do not like it and you realize that it needs a little change.<\/p>\n<p>Then you find a commit from which you have branched off (for example, it was commit <b>ce6578a<\/b> OAuth screen) and enter the following command:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>git<\/b> <span style=\"color: #ff6600;\">rebase<\/span> -i <b>ce6578a<\/b><\/span><\/div>\n<p>Git will open a text editor for you and you will see the following:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><span style=\"color: #ff6600;\">pick<\/span> <b>ce6578a<\/b> OAuth screen<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <span style=\"color: #ff6600;\">pick<\/span> <b>443e51f<\/b> Registration process with validation <span style=\"color: #99cc00;\"><i>&lt;&#8211; new commit message<\/i><\/span><\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>squash<\/b> <b>ba08771<\/b> Second 1.5 operations of 3-step process<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>s<\/b> <b>d58b327<\/b> Ololo I&#8217;m too lazy to make a good commit message for these changes<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>s<\/b> <b>df8cf79<\/b> Fix for the 2nd operation of 3-step process<\/span><\/div>\n<p>The same file contains a cheat sheet with the actions that you can perform with commit. Originally, the word \u201cpick\u201d is written in front of all the commits, which means: \u201cuse the commit without changes.\u201d You can write next to the commit \u201csquash\u201d or just \u201cs\u201d. This means that you want to glue this commit to the previous one in the commit history.<\/p>\n<p>Once all the necessary commits are tagged you save the file and close the text editor. However, Git re-opens the text editor, this time in order to enable you to edit the commit message of the commits that appeared after merging.<\/p>\n<p>After you save and close the file, the log is as follows:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>ce6578a<\/b> OAuth screen<\/span><br \/>\n<span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"> <b>433f5af<\/b> Registration process with validation<\/span><\/div>\n<h2>Protection of the master branch<\/h2>\n<p>But there is one problem with the history changing: if you have ever sent your commits to the server, the server after changing the story doesn\u2019t get a new branch, because the very branch changed its structure and the server does not know how the old and the new structure can be merged into one. That is why you have to use a <strong>fly force<\/strong>. Using this flag tells Git something like this: &#8220;if any problems appear, please solve them in my favor &#8211; delete \u2018disturbing\u2019 commits and keep my local commits on the server.\u201d<\/p>\n<p>This is dangerous because there can be a situation in which your local master branch has become old (you worked on your feature for a couple of days) and at this point you:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>git<\/b> <span style=\"color: #ff6600;\">push<\/span> <b>-f<\/b><\/span><\/div>\n<p>This command sends all of your local branches (which have relevant remote branches) to the server and the current master on the server will be overwritten by your older version. <strong>This is very dangerous!<\/strong><\/p>\n<p>The first thing to do to avoid a similar situation is to clearly specify the branch:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>git<\/b> <span style=\"color: #ff6600;\">push<\/span> <b>-f<\/b> origin mybranch<\/span><\/div>\n<p>In this case, you risk only your own branch, which is likely the one you are working with.<\/p>\n<p>But human beings are fallible and sometimes you may forget to specify a particular branch. That is why we have to protect ourselves. Git comes to help us again. It includes so-called <strong>hooks<\/strong>&#8211;scripts requested before or after certain actions (commit, push, change history). These scripts are stored in any Git-repository folder <b>.git\/hooks<\/b>. Initially this folder is filled with examples of similar scripts (files with names like <b>*.sample<\/b>).<\/p>\n<p>In addition, the scripts themselves can perform actions, they can also influence the actions of Git. For example, if the script exits with non-zero code, the action that took place before script was called is canceled.<\/p>\n<p>In order to protect the master from the force push we need to add hook, which is called when you try to make push (because it should be called pre-push.sh) and ends with a nonzero code if the flag force is used, and any changes affect the master branch. An example of such script can be found <a href=\"\/\/gist.github.com\/pixelhandler\/5718585\">here<\/a>.<\/p>\n<p>And in aim, to add it to your repository, just make<a href=\"https:\/\/gist.githubusercontent.com\/pixelhandler\/5718585\/raw\/1ee3948c6676b704fb9da424c65a767f2c88ae37\/pre-push.sh%20&gt; .git\/hooks\/pre-push; chmod +x .git\/hooks\/pre-push\"> the following command <\/a>curl at the root of your repository.<\/p>\n<p>There is an opinion that the use of force flag on a regular basis (not as an exceptional case) is unnecessarily risky. Our team, when we choose between two evils&#8211;bad history or the risk from force push &#8212; we choose the latter one, but try as much as possible to protect themselves.<\/p>\n<h2>Commit messages<\/h2>\n<p>Accurately formed commit messages are very important to create a truly readable and easy-to-use history. In our current project, we adhere to the rules set out in the<a href=\"http:\/\/chris.beams.io\/posts\/git-commit\/\"> article<\/a>. \u00a0It\u2019s a wonderful article!<\/p>\n<p>Here is a brief summary of the rules from this article (that we slightly modified):<\/p>\n<ul>\n<li>Separate the subject from the body with a blank line.<\/li>\n<li>Limit the subject line to 50 characters.<\/li>\n<li>Capitalize the subject line.<\/li>\n<li>Do not end the subject line with a period.<\/li>\n<li>Wrap the body at 72 characters.<\/li>\n<\/ul>\n<p>By obeying these rules, you receive commit messages as follows:<\/p>\n<div class=\"codeblock\">\n<p><span style=\"color: #99cc00;\"><b>Commit message title<\/b><\/span><\/p>\n<p><span style=\"color: #ff6600;\">Optional commit message<\/span><br \/>\n<span style=\"color: #ff6600;\"> multiline body<\/span><\/p>\n<\/div>\n<h2>The names of branches<\/h2>\n<p>You should also pay attention to naming branches, as when a few people are working on a project, there can be many branches. We need to do it in a way that allows us to easily distinguish branches. The name of a branch should be brief and concise. We use the following pattern for the names of branches:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><b>&lt;<span style=\"color: #ffcc00;\">team member name<\/span>&gt;<\/b> \/ <b>&lt;<span style=\"color: #99cc00;\">feature or fix name<\/span>&gt;<\/b><\/span><\/div>\n<p>There are such titles:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><span style=\"color: #ffcc00;\">misha<\/span> \/ <span style=\"color: #99cc00;\"><span style=\"color: #339966;\">iss123<\/span>_auth_logic<\/span><\/span><\/div>\n<p>If the branch corresponds to the task in the task-tracker, we add its number to the beginning of the name.<\/p>\n<p>If there are two people who work as a team with the branch, we write both names:<\/p>\n<div class=\"codeblock\"><span style=\"padding: 1px 3px; font-family: monospace, sans-serif; font-size: 0.8em; background-color: #f0f0f0; border-top-left-radius: 0.3em; border-top-right-radius: 0.3em; border-bottom-right-radius: 0.3em; border-bottom-left-radius: 0.3em;\"><span style=\"color: #ffcc00;\">mish<\/span><span style=\"color: #33cccc;\">sash<\/span> \/ <span style=\"color: #99cc00;\"><span style=\"color: #339966;\">iss124<\/span>_auth_animations<\/span><\/span><\/div>\n<h2>Test automation<\/h2>\n<p>In our projects, we try to stick to TDD, but the tests are worthless if you do not run them in time \ud83d\ude42 The best time to launch them is before you merge them into a master. However, in practice, people often forget to make tests before a pull request (especially if minor changes are made). That is why the process should be automated.<\/p>\n<p>We run tests automatically when we create a pull request. For CI, we use <strong>Jenkins<\/strong>, and store code in GitHub, that is why for automation we use <a href=\"https:\/\/wiki.jenkins-ci.org\/display\/JENKINS\/GitHub+pull+request+builder+plugin\">plugin<\/a>.<\/p>\n<h2>Emoticons<\/h2>\n<p>If you use GitHub, and you want to add some fun to your log, you can add\u2026 pictures! This practice was started by the guys that make <a href=\"https:\/\/atom.io\/docs\/v0.186.0\/contributing#git-commit-messages.\">GitHub Atom<\/a>.<\/p>\n<p>As a result, you will receive something like this:<\/p>\n<p><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/04\/31.png\"><img loading=\"lazy\" class=\" wp-image-9335 aligncenter\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/04\/31-1024x394.png\" alt=\"3\" width=\"800\" height=\"308\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-1024x394.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-300x115.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-768x295.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-600x231.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-450x173.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31-1000x384.png 1000w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/31.png 1600w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/a><\/p>\n<p>In addition, it is not only fun, it seriously improves readability of the log. Anyway, you should develop your own set of rules about how to name commits according to their content.<\/p>\n<h2>Console<\/h2>\n<p>Although this is my personal opinion, I\u2019ve come across the same idea several times on the Internet: <strong>Git should be used from the terminal<\/strong>. Git was created by people who literally live in the terminal, that is why it is best suited for terminal.<\/p>\n<p>Although, if you do not have a sufficient number of commits in the Linux core, and you do not use vi as the main working tool, you can significantly simplify your life with the help of add-ons to your shell. So, for example, there are additions to zsh that make your console look like this:<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-9336\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/04\/41.png\" alt=\"4\" width=\"1600\" height=\"688\" \/><\/p>\n<p>In addition, over all Git tools the console is one of the most cross functional and popular tools and you will eventually realize it if you are constantly working with Git.<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In the first part we started exploring Git tree planting and spoke about how to make easy-to-use and elegant trees. In this article we\u2019ll discover&#8230;<\/p>\n","protected":false},"author":63,"featured_media":14559,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Discover useful tips on how to make conflict-free git trees. We\u2019ll discuss the rules and practices that you can you use in your company. Check this cheat-list.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Tips on How to Make Conflict-Free Git Trees|Part 2\" \/>\n<meta property=\"og:description\" content=\"Discover useful tips on how to make conflict-free git trees. We\u2019ll discuss the rules and practices that you can you use in your company. Check this cheat-list.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2015-04-09T20:56:01+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-11-27T15:28:54+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<meta name=\"twitter:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/12-1024x168.png\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/12-1024x168.png\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/\",\"name\":\"Tips on How to Make Conflict-Free Git Trees|Part 2\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/#primaryimage\"},\"datePublished\":\"2015-04-09T20:56:01+00:00\",\"dateModified\":\"2019-11-27T15:28:54+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Discover useful tips on how to make conflict-free git trees. We\\u2019ll discuss the rules and practices that you can you use in your company. Check this cheat-list.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/conflict-free-git-trees-part-2\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/9332"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=9332"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/9332\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/14559"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=9332"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=9332"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=9332"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}