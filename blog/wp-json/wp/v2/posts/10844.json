{"id":10844,"date":"2015-07-05T10:59:46","date_gmt":"2015-07-05T07:59:46","guid":{"rendered":"https:\/\/stanfy.com\/?p=10844"},"modified":"2019-10-23T13:17:35","modified_gmt":"2019-10-23T10:17:35","slug":"ironman-bulb-project-based-on-esp8266","status":"publish","type":"post","link":"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/","title":{"rendered":"Ironman Bulb Project Based on ESP8266"},"content":{"rendered":"<p>A few months ago we welcomed an Ironman in our office that very quickly became a valuable member of the team. While it looked pretty cool, we wanted to add some \u201cspice\u201d to it.<\/p>\n<p>So I came up with the idea to add a glowing heart to it &#8211; an indicator which would change colors under certain conditions. After a short discussion with the team, we chose to make that condition the status of the Internet connection in the office.<\/p>\n<p><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/11\/iron-esp.jpg\"><img loading=\"lazy\" class=\"wp-image-11059 size-full\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/11\/iron-esp.jpg\" alt=\"IoT project\" width=\"400\" height=\"540\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-esp.jpg 400w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-esp-222x300.jpg 222w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-esp-333x450.jpg 333w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/a><\/p>\n<p>As we occasionally may have internet interruptions at the office, it would be great if the team could see the current connectivity status, so that in case of an outage we could contact the provider immediately and tell him what kind of problem we have without even opening the monitoring services. That is why I decided to visualize the quality of the Internet connection with the help of an indicator.<\/p>\n<h2>ESP8266 project<\/h2>\n<p>I chose to use a bulb with different colors as an indicator, and since I had an RGB stip, that was the best choice.\u00a0The main part of the project was the controller with PWM (Pulse Width Modulation) that allowed changing colors of the indicator. As the RGB strip (as well as the single RGB LED) had 4 pins (the colors red, green, and blue and common contact, +\/- depending on the type of RGB LED), I needed the controller to manage the colors. It was important that the controller had a wireless connectivity.\u00a0For this I chose the <a href=\"http:\/\/www.esp8266.com\/wiki\/doku.php?id=esp8266-module-family\" target=\"_blank\" rel=\"noopener noreferrer\">ESP8266 WiFi module<\/a>, a highly integrated chip designed for the needs of the IoT (<a href=\"https:\/\/stanfy.com\/services-iot\/\" target=\"_blank\" rel=\"noopener noreferrer\">Internet of Things<\/a>). I used ESP8266-07 modification, because it had enough GPIOs (General-purpose input\/output pins) for connecting to the RGB strip. \u00a0Also, ESP8266 IoT is more powerful in general than Arduino and has more ROM and RAM, but is smaller.<\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-medium wp-image-15159 aligncenter\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07-300x300.jpg\" alt=\"\" width=\"300\" height=\"300\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07-300x300.jpg 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07-150x150.jpg 150w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07-600x600.jpg 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07-450x450.jpg 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/ESP8266-07.jpg 700w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<p>The IoT chip I bought had the following characteristics:<\/p>\n<ul>\n<li>CPU Frequency: 80MHz<\/li>\n<li>Flash size: 512K (64 SPIFFS)<\/li>\n<li>RAM data: \u00a080K<\/li>\n<li>RAM instruction: 32K<\/li>\n<li>GPIO: 16<\/li>\n<\/ul>\n<p>The next step was to select the Firmware for that chip. There are several types of firmware for IoT available for this chip, such as native AT mode, NodeMCU, Smart.js and Arduino IDE. The last one is more familiar to me, so I\u2019ve chosen <a href=\"https:\/\/stanfy.com\/blog\/hardware-platforms-for-internet-of-things-the-choices-we-make\/\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino IDE for the IoT project<\/a>.<\/p>\n<p>After that I needed to assemble the scheme to be able to flash it with my code.<\/p>\n<p>The electronic parts that I used for it were:<\/p>\n<ol>\n<li>Power adapter 12DC &#8211; 1pc<\/li>\n<li>IoT chip ESP8266-07 &#8211; 1pc<\/li>\n<li>Breadboard &#8211; 1pc<\/li>\n<li>Connectors for breadboard ~ 20pcs<\/li>\n<li>DC-DC adapter 12v to 3.3v &#8211; 1pc<\/li>\n<li>Resistor 10K &#8211; 8pcs<\/li>\n<li>Resistor 4.7K &#8211; 3pcs<\/li>\n<li>Resistor 2.2K &#8211; 3pcs<\/li>\n<li>Transistor MOSFET STP16NF06 &#8211; 3pcs<\/li>\n<li>Transistor bipolar BC547B &#8211; 3pcs<\/li>\n<li>A part of RGB strip<\/li>\n<li>Any USB-TTL adapter for flashing<\/li>\n<li>Resistor 220 &#8211; 3pcs (for debugging)<\/li>\n<li>RGB led with common anode &#8211; 1pc \u00a0(for debugging)<\/li>\n<\/ol>\n<p>The scheme had 12V DC power for the RGB LED strip, and 3.3V for ESP8266, so I needed an additional step down converter from 12V to 3.3V. I used a DC-DC converter based on LM2596.<\/p>\n<p>DC-DC converter based on LM2596To control LEDs with ESP I used cascade of MOSFET and a bipolar transistor for each channel. As the first step I had to connect all necessary pins of ESP for uploading firmware via Arduino IDE (as it is shown on the scheme below). It is important to mention that GPIO0, GPIO2, RESET, EN should be pulled up and GPIO15 should be pulled down for the stability of the chip. Then I connected ESP to PC via the TTL-USB adapter.<\/p>\n<p>I had some trouble with PWM, because I had only MOSFETs STP16NF06, N-channel 60V, 16A. ESP gives only 3.3V of control signal and that is not enough for the power transistor to work steadily, so I had to enhance the level of signal for the Gate. For this the additional NPN \u00a0transistor BC547B was used, which pulled up the Gate of MOSFET to 12V and changed the logic to inverse for GPIO12 ,14, 16. It is important to mention that this method has a disadvantage; the LEDs are always turned on even when ESP is off.<\/p>\n<p><img loading=\"lazy\" class=\"size-medium wp-image-15160 aligncenter\" src=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-300x194.png\" alt=\"\" width=\"300\" height=\"194\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-300x194.png 300w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-768x498.png 768w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-1024x664.png 1024w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-600x389.png 600w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-450x292.png 450w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266-1000x648.png 1000w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/main-scheme-arduino-esp8266.png 1558w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/p>\n<h3>Step 1: The hardware part<\/h3>\n<p>I started with building the circuit on the solderless breadboard as shown on the project scheme above. ESP is shipped with AT-command firmware, so I had to first set up the last version of the Arduino IDE with all necessary libraries, as described in the <a href=\"https:\/\/github.com\/esp8266\/Arduino\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino IDE<\/a> manual. At the first stage of debugging I used a simple RGB LED instead of the cascades of transistors. It\u2019s important to use an LED with a common anode, which is with common VCC, otherwise it will work in a reverse mode. After that, each LED pin must be connected to GPIO16, 14, 12 accordingly via 220ohm resistor.<\/p>\n<p>Now when I had the circuit assembled, in order for it to work correctly, I had to prepare the software part which consisted of firmware for ESP and the server side script.<\/p>\n<h3>Step 2: Sketch for ESP<\/h3>\n<p>To prepare the environment to build and upload the sketch to the chip, I connected the full circle to the power and to the USB port via the adapter, opened the Arduino IDE with pre-installed libraries, downloaded a sketch for ESP from github, and set the right ssid and password in the arduino sketch.<\/p>\n<pre>for ( uint8_t i = 0; i &lt; server.args(); i++ ) {\r\n\t\tmessage += \" \" + server.argName ( i ) + \": \" + server.arg ( i ) + \"\\n\";\r\n\t\tint tmp = 0;\r\n\t\t\r\n\t\tif (server.argName(i) == \"rgb\" )\r\n    \t\t{\r\n      \t\t\tif ( server.arg(i) != rgb) \r\n      \t\t\t{\r\n          \t\t\trgb =  server.arg(i);\r\n          \t\t\tconvert(rgb, &amp;message);\r\n      \t\t\t}\r\n    \t\t}\r\n\t}\r\n<\/pre>\n<p><a href=\"https:\/\/github.com\/stanfy\/ironman-bulb\/blob\/master\/esp-pwm.ino\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino sketch code on Github.<\/a><\/p>\n<p>Next, I had to configure IDE correctly to work with ESP. The process was the following: I selected \u201cTools\u201d -&gt; \u201cBoard\u201d, then \u201cGeneric ESP8266 module\u201d from the list, changed the \u201cUpload speed\u201d to 115200 and selected the right \u201cPort\u201d with our usb adapter. Before chip flashing I had to press and fix the button on the circle named S2, connect GPIO0 to GND, and push S1 to reboot ESP. After that it was necessary to build and upload the firmware to the chip, and after a successful upload, to release button S2. Then I opened the Serial Monitor and pressed S1, the chip restarted and I was able to see the ip address of the chip from our network and the RGB LED changed the color to dimly white.<\/p>\n<h3>Step 3: Server side script<\/h3>\n<p>Now I had the work on device completed and could test it with a curl command such as:<\/p>\n<p><em>curl \u00a0&#8216;<a href=\"http:\/\/192.168.1.5\/set?rgb=ff5000\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/192.168.1.5\/set?rgb=ff0000<\/a>&#8216;<\/em><\/p>\n<p><em>curl \u00a0&#8216;<a href=\"http:\/\/192.168.1.5\/set?rgb=ff5000\" target=\"_blank\" rel=\"noopener noreferrer\">http:\/\/192.168.1.5\/set?rgb=0000ff<\/a>&#8216;<\/em><\/p>\n<p>in which \u201c<a href=\"http:\/\/192.168.1.5\/set?rgb=ff5000\" target=\"_blank\" rel=\"noopener noreferrer\">ff0000<\/a>\u201d and \u201c<a href=\"http:\/\/192.168.1.5\/set?rgb=ff5000\" target=\"_blank\" rel=\"noopener noreferrer\">0000ff<\/a>\u201d were the HTML code colors and the IP address I got from the Arduino IDE terminal console when ESP was restarted. \u00a0After the first command the LED had to change its color to red, and after the second, to blue. When everything was ok, I started to prepare a script for monitoring the quality of the Internet connection.<\/p>\n<pre>def checkHost(host):\r\n    \r\n    global color\r\n\r\n    ret = Popen(\"\"\"ping -c 10 -i 0.2 -q -W 4 {0}| tail -n 2\"\"\".format(host[0]), shell=True, stdout=PIPE, stderr=PIPE)\r\n    \r\n    # Get packets lost\r\n    try:\r\n        lost = re.search(r'(\\d+)% packet loss', ret.stdout.readline().rstrip()).group(1)\r\n        if int(lost) &gt; 20:\r\n          if color &lt; host[2]:\r\n             color = host[2]\r\n             print host[0] + ' ' + lost\r\n    except:\r\n        pass\r\n<\/pre>\n<p><a href=\"https:\/\/github.com\/stanfy\/ironman-bulb\/blob\/master\/check-connection.py\" target=\"_blank\" rel=\"noopener noreferrer\">Python \u00a0script on Github.<\/a><\/p>\n<p>The server side is on the Linux gateway. It\u2019s a simple python script, that pings a list of servers every 15 seconds. Every host has 2 parameters: the maximum ping (max_delay) and the index of significance (color). When the ping to some host is more than \u201c2 * max_delay\u201d or packets lost are more than 20%, the quality of the connection is considered to be bad, and the script sends a post request to ESP with a parameter like \u201800ffff\u2019 in order to change the strip color to one of the preset colors with fading. Each color represents the Internet connectivity status in range from &#8220;Ok&#8221; (good connection) \u00a0to &#8220;Disaster&#8221; (full disconnection from the provider).<\/p>\n<h2>Troubles and fixes<\/h2>\n<p>During the project implementation I was faced with a number of problems. The first problem was that the signal was too weak to manage the powerful MOSFET, which I solved with the help of an additional bipolar transistor for signal amplification. The next problem was associated with the unstable work of the soft PWM with default settings, which I solved by changing the PWM frequency to 500HZ. The last issue, which is still unsolved, is with the high sensitivity to the static electricity that causes chip reboot.<\/p>\n<p>The next step in the development was to move the scheme from breadboard to the textolite, and pull-up the rest pins.<\/p>\n<p><a href=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/10\/iron-main.jpg\"><img loading=\"lazy\" class=\"wp-image-10848 size-full aligncenter\" src=\"https:\/\/stanfy.com\/wp-content\/uploads\/2015\/10\/iron-main.jpg\" alt=\"Ironman project esp8266\" width=\"400\" height=\"548\" srcset=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-main.jpg 400w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-main-219x300.jpg 219w, https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-main-328x450.jpg 328w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/a><\/p>\n<h2>Sum up<\/h2>\n<p>This project has already been working successfully for a few days, and during that time there was a small routing failure and as a result some services were not available for a few minutes. All my colleagues were able to identify what the issue was just by the color of the LED strip. And when the channel overloads and some pings are lost, the strip changes color to indicate the problem.<\/p>\n<p>In general, I\u2019m satisfied with the result, and later I can add more functionality since I have free GPIO and hardware resources.<\/p>\n<p>I wish you a good hack!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A few months ago we welcomed an Ironman in our office that very quickly became a valuable member of the team. <\/p>\n","protected":false},"author":63,"featured_media":14640,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[797],"tags":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<meta name=\"description\" content=\"Read about our experience with the Ironman Bulb project based on ESP8266. The info on the process, troubles, and fixes is available in the article.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"ESP8266 Based Irobnman Bulb Project: Detailed Description\" \/>\n<meta property=\"og:description\" content=\"Read about our experience with the Ironman Bulb project based on ESP8266. The info on the process, troubles, and fixes is available in the article.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/\" \/>\n<meta property=\"og:site_name\" content=\"Intellectsoft Blog\" \/>\n<meta property=\"article:published_time\" content=\"2015-07-05T07:59:46+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-10-23T10:17:35+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-esp.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"400\" \/>\n\t<meta property=\"og:image:height\" content=\"540\" \/>\n<meta name=\"twitter:card\" content=\"summary\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/\",\"name\":\"Intellectsoft Blog\",\"description\":\"\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/www.intellectsoft.net\/blog\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/wp-content\/uploads\/iron-esp.jpg\",\"width\":400,\"height\":540},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/#webpage\",\"url\":\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/\",\"name\":\"ESP8266 Based Irobnman Bulb Project: Detailed Description\",\"isPartOf\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/#primaryimage\"},\"datePublished\":\"2015-07-05T07:59:46+00:00\",\"dateModified\":\"2019-10-23T10:17:35+00:00\",\"author\":{\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\"},\"description\":\"Read about our experience with the Ironman Bulb project based on ESP8266. The info on the process, troubles, and fixes is available in the article.\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.intellectsoft.net\/blog\/ironman-bulb-project-based-on-esp8266\/\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#\/schema\/person\/934d88e6448434bc0f87550678a8637e\",\"name\":\"Anastasiia Hibaieva\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/www.intellectsoft.net\/blog\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5e777493cd8ae0902fee5b35c44765ce?s=96&d=mm&r=g\",\"caption\":\"Anastasiia Hibaieva\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10844"}],"collection":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/users\/63"}],"replies":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/comments?post=10844"}],"version-history":[{"count":0,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/posts\/10844\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media\/14640"}],"wp:attachment":[{"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/media?parent=10844"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/categories?post=10844"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.intellectsoft.net\/blog\/wp-json\/wp\/v2\/tags?post=10844"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}